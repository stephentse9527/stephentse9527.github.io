{"total":33,"pageSize":12,"pageCount":3,"data":[{"title":"Zookeeper工作原理和机制","uid":"26f886a7c89a2304aec3bf49d8ad4b85","slug":"Zookeeper工作原理和机制","date":"2021-05-03T20:37:38.000Z","updated":"2022-09-15T14:22:17.540Z","comments":true,"path":"api/articles/Zookeeper工作原理和机制.json","cover":[],"text":"Zookeeper工作机制是一个分布式服务管理框架，负责存储和管理数据，然后接受观察者的注册，一旦这些数据发生变化，zookeeper就负责通知这些观察者做出相应的反应 Zookeeper服务器角色一般zookeeper都是以集群的形式存在的，是一个基于主从复制的高可用集群，每个...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"中间件","slug":"中间件","count":5,"path":"api/tags/中间件.json"},{"name":"底层原理","slug":"底层原理","count":4,"path":"api/tags/底层原理.json"},{"name":"Zookeeper","slug":"Zookeeper","count":1,"path":"api/tags/Zookeeper.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Hystrix底层原理","uid":"66fbda97c6061d29db33ae44cd19310f","slug":"Hystrix底层原理","date":"2021-05-03T20:31:56.000Z","updated":"2022-09-15T14:22:17.520Z","comments":true,"path":"api/articles/Hystrix底层原理.json","cover":[],"text":"Hystrix 是什么？在分布式系统中，每个服务都可能会调用很多其他服务，被调用的那些服务就是依赖服务，有的时候某些依赖服务出现故障也是很正常的。 Hystrix可以提供那些功能Hystrix可以提供： 服务熔断 服务降级 服务限流 Hystrix 更加细节的设计原则 阻止任何一...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"中间件","slug":"中间件","count":5,"path":"api/tags/中间件.json"},{"name":"底层原理","slug":"底层原理","count":4,"path":"api/tags/底层原理.json"},{"name":"Hystrix","slug":"Hystrix","count":1,"path":"api/tags/Hystrix.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"LinkedHashMap源码分析","uid":"3864b9afa9fa3172cb932c409fc2806d","slug":"LinkedHashMap源码分析","date":"2021-05-03T20:28:47.000Z","updated":"2022-09-15T14:22:17.520Z","comments":true,"path":"api/articles/LinkedHashMap源码分析.json","cover":null,"text":"LinkedHashMap源码分析LinkedHashMap 继承于 HashMap，用来存储数据的Entry也是继承HashMap的Node节点，多了两个引用before，after，用来把节点变成双向链表 static class Entry&lt;K,V> extends ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"源码分析","slug":"源码分析","count":5,"path":"api/tags/源码分析.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"HashMap源码分析(JDK8)","uid":"7f10a4946d2eb733c758ace15b1327e4","slug":"HashMap源码分析(JDK8)","date":"2021-05-03T17:00:48.000Z","updated":"2022-09-15T14:22:17.516Z","comments":true,"path":"api/articles/HashMap源码分析(JDK8).json","cover":null,"text":"HashMap源码分析(JDK8)一、jdk1.8容器初始化 无参构造函数 /** * DEFAULT_LOAD_FACTOR = 0.75 **/ public HashMap() &#123; this.loadFactor = DEFAULT_LOAD_FACTOR; //...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"源码分析","slug":"源码分析","count":5,"path":"api/tags/源码分析.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"HashMap源码分析(JDK7)","uid":"1009ae073b519734ad64e46d744b178f","slug":"HashMap源码分析(JDK7)","date":"2021-05-03T16:56:19.000Z","updated":"2022-09-15T14:22:17.516Z","comments":true,"path":"api/articles/HashMap源码分析(JDK7).json","cover":null,"text":"HashMap源码分析-JDK1.7一、jdk1.7容器初始化 无参构造函数 /** * DEFAULT_INITIAL_CAPACITY = 16 * DEFAULT_LOAD_FACTOR = 0.75 **/ public HashMap() &#123; this(DEF...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"源码分析","slug":"源码分析","count":5,"path":"api/tags/源码分析.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"ConcurrentHashMap源码分析(JDK8)","uid":"f6da82311c70124223da9323fdd70f40","slug":"ConcurrentHashMap源码分析(JDK8)","date":"2021-05-03T16:02:52.000Z","updated":"2022-09-15T14:22:17.516Z","comments":true,"path":"api/articles/ConcurrentHashMap源码分析(JDK8).json","cover":[],"text":"一、jdk1.8容器初始化1、源码分析 在jdk8的ConcurrentHashMap中一共有5个构造方法，这四个构造方法中都没有对内部的数组做初始化， 只是对一些变量的初始值做了处理 jdk8的ConcurrentHashMap的数组初始化是在第一次添加元素时完成 //没有维护...","link":"","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"源码分析","slug":"源码分析","count":5,"path":"api/tags/源码分析.json"},{"name":"多线程","slug":"多线程","count":3,"path":"api/tags/多线程.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"ConcurrentHashMap源码分析(JDK7)","uid":"a317c231a44cc2204c181b9cec137632","slug":"ConcurrentHashMap源码分析(JDK7)","date":"2021-05-03T15:49:58.000Z","updated":"2022-09-15T14:22:17.512Z","comments":true,"path":"api/articles/ConcurrentHashMap源码分析(JDK7).json","cover":[],"text":"一、Unsafe介绍1、Unsafe简介Unsafe类相当于是一个java语言中的后门类，提供了硬件级别的原子操作，所以在一些并发编程中被大量使用。jdk已经作出说明，该类对程序员而言不是一个安全操作，在后续的jdk升级过程中，可能会禁用该类。所以这个类的使用是一把双刃剑，实际项...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"源码分析","slug":"源码分析","count":5,"path":"api/tags/源码分析.json"},{"name":"多线程","slug":"多线程","count":3,"path":"api/tags/多线程.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"计算机网络","uid":"293c17b4d2a4292133cc4d1ffd7f8725","slug":"计算机网络","date":"2021-05-03T12:29:51.000Z","updated":"2022-09-15T14:22:17.568Z","comments":true,"path":"api/articles/计算机网络.json","cover":[],"text":"计算机网络Http和Https的区别？ 其实HTTPS就是从HTTP加上加密处理（一般是SSL安全通信线路）+认证+完整性保护 区别： https需要拿到ca证书，需要钱的 端口不一样，http是80，https443 http是超文本传输协议，信息是明文传输，https则是具有...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"计算机基础","slug":"计算机基础","count":4,"path":"api/tags/计算机基础.json"},{"name":"计算机网络","slug":"计算机网络","count":1,"path":"api/tags/计算机网络.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"基于hexo + github创建个人博客","uid":"6d685cebe78237e58f2eba5924bfc97a","slug":"基于hexo-github创建个人博客","date":"2021-05-02T23:07:17.000Z","updated":"2022-09-15T14:22:17.560Z","comments":true,"path":"api/articles/基于hexo-github创建个人博客.json","cover":null,"text":"基于hexo和Github快速创建博客搭建大致流程 创建仓库：&lt;github用户名&gt;.github.io (严格遵守格式) 创建两个分支：master 和 hexo master用来保存生成的网页静态文件，而 hexo 用来保存博客的原始文件 设置hexo为默认分支（...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"博客","slug":"博客","count":1,"path":"api/tags/博客.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}