{"name":"Java","slug":"Java","count":7,"postlist":[{"title":"ConcurrentHashMap源码分析(JDK7)","uid":"a317c231a44cc2204c181b9cec137632","slug":"ConcurrentHashMap源码分析(JDK7)","date":"2021-05-03T15:49:58.000Z","updated":"2022-09-15T14:22:17.512Z","comments":true,"path":"api/articles/ConcurrentHashMap源码分析(JDK7).json","keywords":null,"cover":[],"text":"一、Unsafe介绍1、Unsafe简介Unsafe类相当于是一个java语言中的后门类，提供了硬件级别的原子操作，所以在一些并发编程中被大量使用。jdk已经作出说明，该类对程序员而言不是一个安全操作，在后续的jdk升级过程中，可能会禁用该类。所以这个类的使用是一把双刃剑，实际项...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"源码分析","slug":"源码分析","count":5,"path":"api/tags/源码分析.json"},{"name":"多线程","slug":"多线程","count":3,"path":"api/tags/多线程.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"ConcurrentHashMap源码分析(JDK8)","uid":"f6da82311c70124223da9323fdd70f40","slug":"ConcurrentHashMap源码分析(JDK8)","date":"2021-05-03T16:02:52.000Z","updated":"2022-09-15T14:22:17.516Z","comments":true,"path":"api/articles/ConcurrentHashMap源码分析(JDK8).json","keywords":null,"cover":[],"text":"一、jdk1.8容器初始化1、源码分析 在jdk8的ConcurrentHashMap中一共有5个构造方法，这四个构造方法中都没有对内部的数组做初始化， 只是对一些变量的初始值做了处理 jdk8的ConcurrentHashMap的数组初始化是在第一次添加元素时完成 //没有维护...","link":"","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"源码分析","slug":"源码分析","count":5,"path":"api/tags/源码分析.json"},{"name":"多线程","slug":"多线程","count":3,"path":"api/tags/多线程.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"HashMap源码分析(JDK7)","uid":"1009ae073b519734ad64e46d744b178f","slug":"HashMap源码分析(JDK7)","date":"2021-05-03T16:56:19.000Z","updated":"2022-09-15T14:22:17.516Z","comments":true,"path":"api/articles/HashMap源码分析(JDK7).json","keywords":null,"cover":null,"text":"HashMap源码分析-JDK1.7一、jdk1.7容器初始化 无参构造函数 /** * DEFAULT_INITIAL_CAPACITY = 16 * DEFAULT_LOAD_FACTOR = 0.75 **/ public HashMap() &#123; this(DEF...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"源码分析","slug":"源码分析","count":5,"path":"api/tags/源码分析.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"HashMap源码分析(JDK8)","uid":"7f10a4946d2eb733c758ace15b1327e4","slug":"HashMap源码分析(JDK8)","date":"2021-05-03T17:00:48.000Z","updated":"2022-09-15T14:22:17.516Z","comments":true,"path":"api/articles/HashMap源码分析(JDK8).json","keywords":null,"cover":null,"text":"HashMap源码分析(JDK8)一、jdk1.8容器初始化 无参构造函数 /** * DEFAULT_LOAD_FACTOR = 0.75 **/ public HashMap() &#123; this.loadFactor = DEFAULT_LOAD_FACTOR; //...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"源码分析","slug":"源码分析","count":5,"path":"api/tags/源码分析.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"LinkedHashMap源码分析","uid":"3864b9afa9fa3172cb932c409fc2806d","slug":"LinkedHashMap源码分析","date":"2021-05-03T20:28:47.000Z","updated":"2022-09-15T14:22:17.520Z","comments":true,"path":"api/articles/LinkedHashMap源码分析.json","keywords":null,"cover":null,"text":"LinkedHashMap源码分析LinkedHashMap 继承于 HashMap，用来存储数据的Entry也是继承HashMap的Node节点，多了两个引用before，after，用来把节点变成双向链表 static class Entry&lt;K,V> extends ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"源码分析","slug":"源码分析","count":5,"path":"api/tags/源码分析.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Synchronized关键字底层原理","uid":"e70e2ff17ca94471876ef71091a97a2a","slug":"Synchronized关键字底层原理","date":"2021-05-03T20:50:19.000Z","updated":"2022-09-15T14:22:17.536Z","comments":true,"path":"api/articles/Synchronized关键字底层原理.json","keywords":null,"cover":[],"text":"Synchronized 关键字底层原理其实在 jdk1.6 之前的 synchronized 锁都是重量级锁，从 jdk1.6 开始对锁进行了优化，加入了从无锁-偏向锁-轻量级锁-自旋-重量级锁的升级流程，锁的状态都保存在对象的对象头中，所以需要了解Java对象头 理解Java...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"多线程","slug":"多线程","count":3,"path":"api/tags/多线程.json"},{"name":"底层原理","slug":"底层原理","count":4,"path":"api/tags/底层原理.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"JVM优化总结","uid":"b38e006a0ed784a6f0bb2ad5154dba4f","slug":"jvm优化总结","date":"2022-05-29T17:00:48.000Z","updated":"2022-09-15T14:22:17.544Z","comments":true,"path":"api/articles/jvm优化总结.json","keywords":null,"cover":null,"text":"JVM优化总结前置知识-元空间的知识元空间内存分配规则Metaspace 空间被分配在本地内存中(非堆上)，默认不限制内存使用，可以使用 MaxMetaspaceSize 指定最大值。MetaspaceSize 指定最小值，默认 21 M，在元空间申请的内存会分成一个一个的 Ma...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"JVM","slug":"JVM","count":1,"path":"api/tags/JVM.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}