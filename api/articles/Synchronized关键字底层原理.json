{"title":"Synchronized关键字底层原理","uid":"e70e2ff17ca94471876ef71091a97a2a","slug":"Synchronized关键字底层原理","date":"2021-05-03T20:50:19.000Z","updated":"2022-09-15T14:22:17.536Z","comments":true,"path":"api/articles/Synchronized关键字底层原理.json","keywords":null,"cover":[],"content":"<h1 id=\"Synchronized-关键字底层原理\"><a href=\"#Synchronized-关键字底层原理\" class=\"headerlink\" title=\"Synchronized 关键字底层原理\"></a>Synchronized 关键字底层原理</h1><p>其实在 jdk1.6 之前的 synchronized 锁都是重量级锁，从 jdk1.6 开始对锁进行了优化，<br>加入了从无锁-偏向锁-轻量级锁-自旋-重量级锁的升级流程，锁的状态都保存在对象的对象头中，所以需要了解Java对象头</p>\n<h3 id=\"理解Java对象头与Monitor\"><a href=\"#理解Java对象头与Monitor\" class=\"headerlink\" title=\"理解Java对象头与Monitor\"></a>理解Java对象头与Monitor</h3><p>在JVM中，对象在内存中的布局分为三块区域：对象头、实例数据和对齐填充</p>\n<img src=\"/post/Synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210310202521089.png\" class=\"\" title=\"image-20210310202521089\">\n\n<p>对象的运行时数据都放在MarkWord当中，其中也包括对象的锁的信息，分布如下：</p>\n<img src=\"/post/Synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210310203302402.png\" class=\"\" title=\"image-20210310203302402\">\n\n<blockquote>\n<p>Java对象的信息比较多，所以在不同的锁状态下，MarkWord存储的内容是不一样的</p>\n</blockquote>\n<p>锁膨胀过程</p>\n<img src=\"/post/Synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210503205455548.png\" class=\"\" title=\"image-20210503205455548\">\n\n<p>当我们创建一个对象LockObject时，该对象的部分Markword关键数据如下。</p>\n<table>\n<thead>\n<tr>\n<th>bit fields</th>\n<th>是否偏向锁</th>\n<th>锁标志位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hash</td>\n<td>0</td>\n<td>01</td>\n</tr>\n</tbody></table>\n<p>　　从图中可以看出，<strong>偏向锁</strong>的标志位是“01”，状态是“0”，表示该对象还没有被加上偏向锁。（“1”是表示被加上偏向锁）。该对象被创建出来的那一刻，就有了偏向锁的标志位，这也说明了所有对象都是可偏向的，但所有对象的状态都为“0”，也同时说明所有被创建的对象的偏向锁并没有生效。</p>\n<h4 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h4><p>不过，当线程执行到临界区（critical section）时，此时会利用CAS(Compare and Swap)操作，将线程ID插入到Markword中，同时修改偏向锁的标志位。</p>\n<blockquote>\n<p>所谓临界区，就是只允许一个线程进去执行操作的区域，即同步代码块。CAS是一个原子性操作</p>\n</blockquote>\n<p>此时的Mark word的结构信息如下：</p>\n<table>\n<thead>\n<tr>\n<th>bit fields</th>\n<th></th>\n<th>是否偏向锁</th>\n<th>锁标志位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>threadId</td>\n<td>epoch</td>\n<td>1</td>\n<td>01</td>\n</tr>\n</tbody></table>\n<p>此时偏向锁的状态为“1”，说明对象的偏向锁生效了，同时也可以看到，哪个线程获得了该对象的锁。</p>\n<h5 id=\"那么，什么是偏向锁\"><a href=\"#那么，什么是偏向锁\" class=\"headerlink\" title=\"那么，什么是偏向锁?\"></a>那么，什么是偏向锁?</h5><p>　　偏向锁是jdk1.6引入的一项锁优化，其中的“偏”是偏心的偏。它的意思就是说，这个锁会偏向于第一个获得它的线程，在接下来的执行过程中，假如该锁没有被其他线程所获取，没有其他线程来竞争该锁，那么持有偏向锁的线程将永远不需要进行同步操作。<br>也就是说:<br>在此线程之后的执行过程中，如果再次进入或者退出同一段同步块代码，并不再需要去进行<strong>加锁</strong>或者<strong>解锁</strong>操作，而是会做以下的步骤：</p>\n<ol>\n<li>Load-and-test，也就是简单判断一下当前线程id是否与Markword当中的线程id是否一致.</li>\n<li>如果一致，则说明此线程已经成功获得了锁，继续执行下面的代码.</li>\n<li>如果不一致，则要检查一下对象是否还是可偏向，即“是否偏向锁”标志位的值。</li>\n<li>如果还未偏向，则利用CAS操作来竞争锁，也即是第一次获取锁时的操作。</li>\n</ol>\n<p>　　如果此对象已经偏向了，并且不是偏向自己，则说明存在了<strong>竞争</strong>。此时可能就要根据另外线程的情况，可能是重新偏向，也有可能是做偏向撤销，但大部分情况下就是升级成<strong>轻量级锁</strong>了。<br>　　可以看出，偏向锁是针对于一个线程而言的，线程获得锁之后就不会再有解锁等操作了，这样可以省略很多开销。假如有两个线程来竞争该锁话，那么偏向锁就失效了，进而升级成轻量级锁了。<br>　　为什么要这样做呢？因为经验表明，其实大部分情况下，都会是同一个线程进入同一块同步代码块的。这也是为什么会有偏向锁出现的原因。<br>　　在Jdk1.6中，偏向锁的开关是默认开启的，适用于只有一个线程访问同步块的场景。</p>\n<h4 id=\"锁膨胀\"><a href=\"#锁膨胀\" class=\"headerlink\" title=\"锁膨胀\"></a>锁膨胀</h4><p>　　当出现有两个线程来竞争锁的话，那么偏向锁就失效了，此时锁就会膨胀，升级为轻量级锁。这也是我们经常所说的<strong>锁膨胀</strong></p>\n<h4 id=\"锁撤销\"><a href=\"#锁撤销\" class=\"headerlink\" title=\"锁撤销\"></a>锁撤销</h4><p>由于偏向锁失效了，那么接下来就得把该锁撤销，锁撤销的开销花费还是挺大的，其大概的过程如下：</p>\n<ol>\n<li>在一个安全点停止拥有锁的线程。</li>\n<li>遍历线程栈，如果存在锁记录的话，需要修复锁记录和Markword，使其变成无锁状态。</li>\n<li>唤醒当前线程，将当前锁升级成轻量级锁。<br>所以，如果某些同步代码块大多数情况下都是有两个及以上的线程竞争的话，那么偏向锁就会是一种累赘，对于这种情况，我们可以一开始就把偏向锁这个默认功能给关闭</li>\n</ol>\n<h4 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h4><p>锁撤销升级为轻量级锁之后，那么对象的Markword也会进行相应的的变化。下面先简单描述下锁撤销之后，升级为轻量级锁的过程：</p>\n<ol>\n<li>线程在自己的栈桢中创建锁记录 LockRecord。</li>\n<li>将锁对象的对象头中的MarkWord复制到线程的刚刚创建的锁记录中。</li>\n<li>将锁记录中的Owner指针指向锁对象。</li>\n<li>将锁对象的对象头的MarkWord替换为指向锁记录的指针。</li>\n</ol>\n<p>对应的图描述如下(图来自周志明深入java虚拟机)</p>\n<img src=\"/post/Synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210310205100386.png\" class=\"\" title=\"image-20210310205100386\">\n\n<img src=\"/post/Synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210310205116111.png\" class=\"\" title=\"image-20210310205116111\">\n\n\n\n<p>之后Markwork如下：</p>\n<table>\n<thead>\n<tr>\n<th>bit fields</th>\n<th>锁标志位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>指向LockRecord的指针</td>\n<td>00</td>\n</tr>\n</tbody></table>\n<p>注：锁标志位”00”表示<strong>轻量级锁</strong><br>轻量级锁主要有两种</p>\n<ol>\n<li>自旋锁</li>\n<li>自适应自旋锁</li>\n</ol>\n<h5 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h5><p>所谓自旋，就是指当有另外一个线程来竞争锁时，这个线程会在原地循环等待，而不是把该线程给<strong>阻塞</strong>，直到那个获得锁的线程释放锁之后，这个线程就可以马上获得锁的。<br>注意，锁在原地循环的时候，是会消耗cpu的，就相当于在执行一个啥也没有的for循环。<br>所以，轻量级锁适用于那些同步代码块执行的很快的场景，这样，线程原地等待很短很短的时间就能够获得锁了。<br>经验表明，大部分同步代码块执行的时间都是很短很短的，也正是基于这个原因，才有了轻量级锁这么个东西。</p>\n<h6 id=\"自旋锁的一些问题\"><a href=\"#自旋锁的一些问题\" class=\"headerlink\" title=\"自旋锁的一些问题\"></a>自旋锁的一些问题</h6><ol>\n<li>如果同步代码块执行的很慢，需要消耗大量的时间，那么这个时侯，其他线程在原地等待空消耗cpu，这会让人很难受。</li>\n<li>本来一个线程把锁释放之后，当前线程是能够获得锁的，但是假如这个时候有好几个线程都在竞争这个锁的话，那么有可能当前线程会获取不到锁，还得原地等待继续空循环消耗cup，甚至有可能一直获取不到锁。</li>\n</ol>\n<p>基于这个问题，我们必须给线程空循环设置一个次数，当线程超过了这个次数，我们就认为，继续使用自旋锁就不适合了，此时锁会再次膨胀，升级为<strong>重量级锁</strong>。<br>默认情况下，自旋的次数为10次，用户可以通过-XX:PreBlockSpin来进行更改。</p>\n<blockquote>\n<p>自旋锁是在JDK1.4.2的时候引入的</p>\n</blockquote>\n<h5 id=\"自适应自旋锁\"><a href=\"#自适应自旋锁\" class=\"headerlink\" title=\"自适应自旋锁\"></a>自适应自旋锁</h5><p>所谓自适应自旋锁就是线程空循环等待的自旋次数并非是固定的，而是会动态着根据实际情况来改变自旋等待的次数。<br>其大概原理是这样的：<br>假如一个线程1刚刚成功获得一个锁，当它把锁释放了之后，线程2获得该锁，并且线程2在运行的过程中，此时线程1又想来获得该锁了，但线程2还没有释放该锁，所以线程1只能自旋等待，但是虚拟机认为，<strong>由于线程1刚刚获得过该锁，那么虚拟机觉得线程1这次自旋也是很有可能能够再次成功获得该锁的，所以会延长线程1自旋的次数</strong>。<br>另外，如果对于某一个锁，一个线程自旋之后，很少成功获得该锁，那么以后这个线程要获取该锁时，是有可能直接忽略掉自旋过程，直接升级为重量级锁的，以免空循环等待浪费资源。</p>\n<blockquote>\n<p>轻量级锁也被称为<strong>非阻塞同步</strong>、<strong>乐观锁</strong>，因为这个过程并没有把线程阻塞挂起，而是让线程空循环等待，串行执行。</p>\n</blockquote>\n<h4 id=\"重量级锁\"><a href=\"#重量级锁\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h4><p>轻量级锁膨胀之后，就升级为重量级锁了。重量级锁是依赖对象内部的monitor锁来实现的，而monitor又依赖操作系统的MutexLock(互斥锁)来实现的，所以重量级锁也被成为<strong>互斥锁</strong>。<br>当轻量级所经过锁撤销等步骤升级为重量级锁之后，它的Markword部分数据大体如下</p>\n<table>\n<thead>\n<tr>\n<th>bit fields</th>\n<th>锁标志位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>指向Mutex的指针</td>\n<td>10</td>\n</tr>\n</tbody></table>\n<h5 id=\"为什么说重量级锁开销大呢\"><a href=\"#为什么说重量级锁开销大呢\" class=\"headerlink\" title=\"为什么说重量级锁开销大呢\"></a>为什么说重量级锁开销大呢</h5><p>主要是，当系统检查到锁是重量级锁之后，会把等待想要获得锁的线程进行<strong>阻塞</strong>，被阻塞的线程不会消耗cup。但是阻塞或者唤醒一个线程时，都需要操作系统来帮忙，这就需要从<strong>用户态</strong>转换到<strong>内核态</strong>，而转换状态是需要消耗很多时间的，有可能比用户执行代码的时间还要长。<br>这就是说为什么重量级线程开销很大的。</p>\n<blockquote>\n<p>互斥锁(重量级锁)也称为<strong>阻塞同步</strong>、<strong>悲观锁</strong></p>\n</blockquote>\n<h3 id=\"重量级锁是什么样的一个形式\"><a href=\"#重量级锁是什么样的一个形式\" class=\"headerlink\" title=\"重量级锁是什么样的一个形式\"></a>重量级锁是什么样的一个形式</h3><p>在重量级锁下，每个对象对应着一个Monitor监视器，在HotSpot下，monitor是由C++实现的ObjectMonitor类来控制的，数据结构如下：</p>\n<blockquote>\n<p>C++源码位置：openjdk\\hotspot\\src\\share\\vm\\runtime\\objectMonitor.hpp</p>\n</blockquote>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">ObjectMonitor() &#123;\n    _header       &#x3D; NULL;\n    _owner        &#x3D; NULL; \t&#x2F;&#x2F; 指向获得该监视器的线程\n    _count        &#x3D; 0; \t\t&#x2F;&#x2F; 记录个数\n    _EntryList    &#x3D; NULL ; \t&#x2F;&#x2F; 处于等待锁block状态的线程，会被加入到该列表 类型：ObjectWaiter*\n    _WaitSet      &#x3D; NULL; \t&#x2F;&#x2F; 处于wait状态的线程，会被加入到_WaitSet 类型：ObjectWaiter*\n    _waiters      &#x3D; 0, \n    _recursions   &#x3D; 0;\n    _object       &#x3D; NULL;\n    _WaitSetLock  &#x3D; 0 ;\n    _Responsible  &#x3D; NULL ;\n    _succ         &#x3D; NULL ;\n    _cxq          &#x3D; NULL ;\n    FreeNext      &#x3D; NULL ;\n    _SpinFreq     &#x3D; 0 ;\n    _SpinClock    &#x3D; 0 ;\n    OwnerIsThread &#x3D; 0 ;\n  &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>ObjectMonitor，其中Owner字段指向持有这个对象的线程，并且ObjectMonitor有两个队列，_WaitSet 和 _EntryList，用来保存ObjectWaiter（每个等待锁的线程都会被封装成ObjectWaiter对象）</li>\n<li><strong>多个线程同时访问同步代码时，首先都会进入_EntryList 集合</strong>，当线程获取到对象monitor后，进入 _owner 区域将其指向直接，并累加count，若线程调用 wait() 方法，将释放当前持有的monitor，owner变量恢复为null，count自减1，同时该线程进入 WaitSe t集合中等待被唤醒。若当前线程执行完毕也将释放monitor(锁)并复位变量的值，以便其他线程进入获取monitor(锁)。如下图所示</li>\n</ul>\n<img src=\"/post/Synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210310213302496.png\" class=\"\" title=\"image-20210310213302496\">\n\n<ul>\n<li>而Java对象头MarkWord中就会指向这个ObjectMonitor，进行关联</li>\n</ul>\n","feature":null,"text":"Synchronized 关键字底层原理其实在 jdk1.6 之前的 synchronized 锁都是重量级锁，从 jdk1.6 开始对锁进行了优化，加入了从无锁-偏向锁-轻量级锁-自旋-重量级锁的升级流程，锁的状态都保存在对象的对象头中，所以需要了解Java对象头 理解Java...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"多线程","slug":"多线程","count":3,"path":"api/tags/多线程.json"},{"name":"底层原理","slug":"底层原理","count":4,"path":"api/tags/底层原理.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Synchronized-%E5%85%B3%E9%94%AE%E5%AD%97%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">Synchronized 关键字底层原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%90%86%E8%A7%A3Java%E5%AF%B9%E8%B1%A1%E5%A4%B4%E4%B8%8EMonitor\"><span class=\"toc-text\">理解Java对象头与Monitor</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%81%8F%E5%90%91%E9%94%81\"><span class=\"toc-text\">偏向锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%82%A3%E4%B9%88%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AF%E5%81%8F%E5%90%91%E9%94%81\"><span class=\"toc-text\">那么，什么是偏向锁?</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%94%81%E8%86%A8%E8%83%80\"><span class=\"toc-text\">锁膨胀</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%94%81%E6%92%A4%E9%94%80\"><span class=\"toc-text\">锁撤销</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81\"><span class=\"toc-text\">轻量级锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%87%AA%E6%97%8B%E9%94%81\"><span class=\"toc-text\">自旋锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%87%AA%E6%97%8B%E9%94%81%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">自旋锁的一些问题</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%87%AA%E9%80%82%E5%BA%94%E8%87%AA%E6%97%8B%E9%94%81\"><span class=\"toc-text\">自适应自旋锁</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%87%8D%E9%87%8F%E7%BA%A7%E9%94%81\"><span class=\"toc-text\">重量级锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E9%87%8D%E9%87%8F%E7%BA%A7%E9%94%81%E5%BC%80%E9%94%80%E5%A4%A7%E5%91%A2\"><span class=\"toc-text\">为什么说重量级锁开销大呢</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E9%87%8F%E7%BA%A7%E9%94%81%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%B8%80%E4%B8%AA%E5%BD%A2%E5%BC%8F\"><span class=\"toc-text\">重量级锁是什么样的一个形式</span></a></li></ol></li></ol></li></ol>","author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"RabbitMQ整合SpringBoot","uid":"9fff64f3cbe68428f83c74019add044a","slug":"RabbitMQ整合SpringBoot","date":"2021-05-03T21:03:59.000Z","updated":"2022-09-15T14:22:17.532Z","comments":true,"path":"api/articles/RabbitMQ整合SpringBoot.json","keywords":null,"cover":[],"text":"RabbitMQ的使用 在 Rabbitmq 的模型中，Server 中会包含很多个虚拟主机 Virtual Host ，这就类似于数据库中的库，用来和项目做一一的映射，不同的项目建立不同的主机，达到隔离每个项目的目的。 所以在创建项目前先创建一个主机 在 RabbitMQ 中创...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"中间件","slug":"中间件","count":5,"path":"api/tags/中间件.json"},{"name":"使用心得","slug":"使用心得","count":2,"path":"api/tags/使用心得.json"},{"name":"RabbitMQ","slug":"RabbitMQ","count":1,"path":"api/tags/RabbitMQ.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"中间件高可用知识点","uid":"33521bd94ee66cdecae1afca83643ee9","slug":"中间件高可用知识点","date":"2021-05-03T20:47:18.000Z","updated":"2022-09-15T14:22:17.560Z","comments":true,"path":"api/articles/中间件高可用知识点.json","keywords":null,"cover":null,"text":"不同中间件的高可用架构RabbitMQ高可用 RabbitMQ 是比较有代表性的，因为是基于主从（非分布式）做高可用性的，我们就以 RabbitMQ 为例子讲解第一种 MQ 的高可用性怎么实现 RabbitMQ 有三种模式：单机模式、普通集群模式、镜像集群模式。 单机模式，就是 ...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"系统设计","slug":"系统设计","count":2,"path":"api/tags/系统设计.json"},{"name":"高可用","slug":"高可用","count":1,"path":"api/tags/高可用.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}