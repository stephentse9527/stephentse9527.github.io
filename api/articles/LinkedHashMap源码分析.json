{"title":"LinkedHashMap源码分析","uid":"3864b9afa9fa3172cb932c409fc2806d","slug":"LinkedHashMap源码分析","date":"2021-05-03T20:28:47.000Z","updated":"2022-09-15T14:22:17.520Z","comments":true,"path":"api/articles/LinkedHashMap源码分析.json","keywords":null,"cover":null,"content":"<h3 id=\"LinkedHashMap源码分析\"><a href=\"#LinkedHashMap源码分析\" class=\"headerlink\" title=\"LinkedHashMap源码分析\"></a>LinkedHashMap源码分析</h3><p>LinkedHashMap 继承于 HashMap，用来存储数据的Entry也是继承HashMap的Node节点，多了两个引用before，after，用来把节点变成双向链表</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HashMap<span class=\"token punctuation\">.</span>Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> before<span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"添加put方法\"><a href=\"#添加put方法\" class=\"headerlink\" title=\"添加put方法\"></a>添加put方法</h3><p>并没有去重写put方法，而是直接使用了HashMap的实现，在把节点插入对应的桶的链表时，才重写了newNode方法，也就是创建新节点，通过linkNodeLast方法将Entry接在双向链表尾部，所以<strong>linkedHashMap是带有插入的顺序性的</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">linkNodeLast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LinkedHashMap<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">LinkedHashMap<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> last <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span>\n    tail <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        head <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        p<span class=\"token punctuation\">.</span>before <span class=\"token operator\">=</span> last<span class=\"token punctuation\">;</span>\n        last<span class=\"token punctuation\">.</span>after <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"访问顺序的维护\"><a href=\"#访问顺序的维护\" class=\"headerlink\" title=\"访问顺序的维护\"></a>访问顺序的维护</h3><p>当创建LinkedHashMap时，传入accessOrder参数为true，就可以开启访问顺序维护</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">,</span>\n                     <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">,</span>\n                     <span class=\"token keyword\">boolean</span> accessOrder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>initialCapacity<span class=\"token punctuation\">,</span> loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 开启访问顺序维护</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accessOrder <span class=\"token operator\">=</span> accessOrder<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>LinkedHashMap重写了get方法 ，如果accesOrder为true，就会调用afterNodeAccess方法，内部实现是将这个节点移动到双链表的<strong>末尾</strong></p>\n","feature":null,"text":"LinkedHashMap源码分析LinkedHashMap 继承于 HashMap，用来存储数据的Entry也是继承HashMap的Node节点，多了两个引用before，after，用来把节点变成双向链表 static class Entry&lt;K,V> extends ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"源码分析","slug":"源码分析","count":5,"path":"api/tags/源码分析.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#LinkedHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">LinkedHashMap源码分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0put%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">添加put方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E9%A1%BA%E5%BA%8F%E7%9A%84%E7%BB%B4%E6%8A%A4\"><span class=\"toc-text\">访问顺序的维护</span></a></li></ol>","author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Hystrix底层原理","uid":"66fbda97c6061d29db33ae44cd19310f","slug":"Hystrix底层原理","date":"2021-05-03T20:31:56.000Z","updated":"2022-09-15T14:22:17.520Z","comments":true,"path":"api/articles/Hystrix底层原理.json","keywords":null,"cover":[],"text":"Hystrix 是什么？在分布式系统中，每个服务都可能会调用很多其他服务，被调用的那些服务就是依赖服务，有的时候某些依赖服务出现故障也是很正常的。 Hystrix可以提供那些功能Hystrix可以提供： 服务熔断 服务降级 服务限流 Hystrix 更加细节的设计原则 阻止任何一...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"中间件","slug":"中间件","count":5,"path":"api/tags/中间件.json"},{"name":"底层原理","slug":"底层原理","count":4,"path":"api/tags/底层原理.json"},{"name":"Hystrix","slug":"Hystrix","count":1,"path":"api/tags/Hystrix.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"HashMap源码分析(JDK8)","uid":"7f10a4946d2eb733c758ace15b1327e4","slug":"HashMap源码分析(JDK8)","date":"2021-05-03T17:00:48.000Z","updated":"2022-09-15T14:22:17.516Z","comments":true,"path":"api/articles/HashMap源码分析(JDK8).json","keywords":null,"cover":null,"text":"HashMap源码分析(JDK8)一、jdk1.8容器初始化 无参构造函数 /** * DEFAULT_LOAD_FACTOR = 0.75 **/ public HashMap() &#123; this.loadFactor = DEFAULT_LOAD_FACTOR; //...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"源码分析","slug":"源码分析","count":5,"path":"api/tags/源码分析.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}