{"title":"ConcurrentHashMap源码分析(JDK7)","uid":"a317c231a44cc2204c181b9cec137632","slug":"ConcurrentHashMap源码分析(JDK7)","date":"2021-05-03T15:49:58.000Z","updated":"2022-09-15T14:22:17.512Z","comments":true,"path":"api/articles/ConcurrentHashMap源码分析(JDK7).json","keywords":null,"cover":[],"content":"<h3 id=\"一、Unsafe介绍\"><a href=\"#一、Unsafe介绍\" class=\"headerlink\" title=\"一、Unsafe介绍\"></a>一、Unsafe介绍</h3><h4 id=\"1、Unsafe简介\"><a href=\"#1、Unsafe简介\" class=\"headerlink\" title=\"1、Unsafe简介\"></a>1、Unsafe简介</h4><p>Unsafe类相当于是一个java语言中的后门类，<strong>提供了硬件级别的原子操作</strong>，所以在一些并发编程中被大量使用。jdk已经作出说明，该类对程序员而言不是一个安全操作，在后续的jdk升级过程中，可能会禁用该类。所以这个类的使用是一把双刃剑，实际项目中谨慎使用，以免造成jdk升级不兼容问题。</p>\n<h4 id=\"2、Unsafe-Api\"><a href=\"#2、Unsafe-Api\" class=\"headerlink\" title=\"2、Unsafe Api\"></a>2、Unsafe Api</h4><p>ConcurrentHashMap中出现的Unsafe操作解释：</p>\n<p><code>arrayBaseOffset</code>：获取数组的基础偏移量</p>\n<p><code>arrayIndexScale</code>：获取数组中元素的偏移间隔，要获取对应所以的元素，将索引号和该值相乘，获得数组中指定角标元素的偏移量</p>\n<p><code>getObjectVolatile</code>：获取对象上的属性值或者数组中的元素</p>\n<p><code>getObject</code>：获取对象上的属性值或者数组中的元素，已过时</p>\n<p><code>putOrderedObject</code>：设置对象的属性值或者数组中某个角标的元素，更高效</p>\n<p><code>putObjectVolatile</code>：设置对象的属性值或者数组中某个角标的元素</p>\n<p><code>putObject</code>：设置对象的属性值或者数组中某个角标的元素，已过时</p>\n<h4 id=\"3、代码演示\"><a href=\"#3、代码演示\" class=\"headerlink\" title=\"3、代码演示\"></a>3、代码演示</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test02</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//获取Unsafe对象</span>\n        <span class=\"token class-name\">Unsafe</span> unsafe <span class=\"token operator\">=</span> <span class=\"token function\">getUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取Integer[]的基础偏移量</span>\n        <span class=\"token keyword\">int</span> baseOffset <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBaseOffset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取Integer[]中元素的偏移间隔</span>\n        <span class=\"token keyword\">int</span> indexScale <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">arrayIndexScale</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//获取数组中索引为2的元素对象</span>\n        <span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">getObjectVolatile</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> indexScale<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> baseOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1</span>\n\n        <span class=\"token comment\">//设置数组中索引为2的元素值为100</span>\n        unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">putOrderedObject</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> indexScale<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> baseOffset<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[2, 5, 100, 8, 10]</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//反射获取Unsafe对象</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Unsafe</span> <span class=\"token function\">getUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Field</span> theUnsafe <span class=\"token operator\">=</span> <span class=\"token class-name\">Unsafe</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"theUnsafe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        theUnsafe<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Unsafe</span><span class=\"token punctuation\">)</span> theUnsafe<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"3-1、图解说明\"><a href=\"#3-1、图解说明\" class=\"headerlink\" title=\"3.1、图解说明\"></a>3.1、图解说明</h5><img src=\"/post/ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(JDK7)/20200417093442.png\" class=\"\">\n\n\n\n<h3 id=\"二、jdk1-7容器初始化\"><a href=\"#二、jdk1-7容器初始化\" class=\"headerlink\" title=\"二、jdk1.7容器初始化\"></a>二、jdk1.7容器初始化</h3><h4 id=\"1、源码解析\"><a href=\"#1、源码解析\" class=\"headerlink\" title=\"1、源码解析\"></a>1、源码解析</h4><blockquote>\n<p>无参构造</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//空参构造</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//调用本类的带参构造</span>\n    <span class=\"token comment\">//DEFAULT_INITIAL_CAPACITY = 16</span>\n    <span class=\"token comment\">//DEFAULT_LOAD_FACTOR = 0.75f</span>\n    <span class=\"token comment\">//int DEFAULT_CONCURRENCY_LEVEL = 16</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>DEFAULT_INITIAL_CAPACITY<span class=\"token punctuation\">,</span> DEFAULT_LOAD_FACTOR<span class=\"token punctuation\">,</span> DEFAULT_CONCURRENCY_LEVEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>三个参数的构造：一些非核心逻辑的代码已经省略</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//initialCapacity 定义ConcurrentHashMap存放元素的容量</span>\n<span class=\"token comment\">//concurrencyLevel 定义ConcurrentHashMap中Segment[]的大小</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">,</span>\n                         <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> concurrencyLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   \n    <span class=\"token keyword\">int</span> sshift <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ssize <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//计算Segment[]的大小，保证是2的幂次方数</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ssize <span class=\"token operator\">&lt;</span> concurrencyLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">++</span>sshift<span class=\"token punctuation\">;</span>\n        ssize <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//这两个值用于后面计算Segment[]的角标</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>segmentShift <span class=\"token operator\">=</span> <span class=\"token number\">32</span> <span class=\"token operator\">-</span> sshift<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>segmentMask <span class=\"token operator\">=</span> ssize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//计算每个Segment中存储元素的个数</span>\n    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> initialCapacity <span class=\"token operator\">/</span> ssize<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span> ssize <span class=\"token operator\">&lt;</span> initialCapacity<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">++</span>c<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//最小Segment中存储元素的个数为2</span>\n    <span class=\"token keyword\">int</span> cap <span class=\"token operator\">=</span> MIN_SEGMENT_TABLE_CAPACITY<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">////矫正每个Segment中存储元素的个数，保证是2的幂次方，最小为2</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cap <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">)</span>\n        cap <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//创建一个Segment对象，作为其他Segment对象的模板</span>\n    <span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> s0 <span class=\"token operator\">=</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>loadFactor<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>cap <span class=\"token operator\">*</span> loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                         <span class=\"token punctuation\">(</span><span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashEntry</span><span class=\"token punctuation\">[</span>cap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ss <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Segment</span><span class=\"token punctuation\">[</span>ssize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//利用Unsafe类，将创建的Segment对象存入0角标位置</span>\n    UNSAFE<span class=\"token punctuation\">.</span><span class=\"token function\">putOrderedObject</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">,</span> SBASE<span class=\"token punctuation\">,</span> s0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ordered write of segments[0]</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>segments <span class=\"token operator\">=</span> ss<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>综上：ConcurrentHashMap中保存了一个**默认长度为16的Segment[]<strong>，每个Segment元素中保存了一个</strong>默认长度为2的HashEntry[]**，我们添加的元素，是存入对应的Segment中的HashEntry[]中。所以ConcurrentHashMap中默认元素的长度是32个，而不是16个</p>\n</blockquote>\n<h4 id=\"2、图解\"><a href=\"#2、图解\" class=\"headerlink\" title=\"2、图解\"></a>2、图解</h4><img src=\"/post/ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(JDK7)/20200417101208.png\" class=\"\">\n\n<h4 id=\"3、Segment是什么？\"><a href=\"#3、Segment是什么？\" class=\"headerlink\" title=\"3、Segment是什么？\"></a>3、Segment是什么？</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ReentrantLock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>我们发现Segment是继承自ReentrantLock的，学过线程的兄弟都知道，它可以实现同步操作，从而保证多线程下的安全。因为每个Segment之间的锁互不影响，所以我们也将ConcurrentHashMap中的这种锁机制称之为<strong>分段锁</strong>，这比HashTable的线程安全操作高效的多。</p>\n</blockquote>\n<h4 id=\"4、HashEntry是什么？\"><a href=\"#4、HashEntry是什么？\" class=\"headerlink\" title=\"4、HashEntry是什么？\"></a>4、HashEntry是什么？</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//ConcurrentHashMap中真正存储数据的对象</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">;</span> <span class=\"token comment\">//通过运算，得到的键的hash值</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存入的键</span>\n    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">//存入的值</span>\n    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//记录下一个元素，形成单向链表</span>\n\n    <span class=\"token class-name\">HashEntry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hash <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"三、jdk1-7添加安全\"><a href=\"#三、jdk1-7添加安全\" class=\"headerlink\" title=\"三、jdk1.7添加安全\"></a>三、jdk1.7添加安全</h3><h4 id=\"1、源码分析\"><a href=\"#1、源码分析\" class=\"headerlink\" title=\"1、源码分析\"></a>1、源码分析</h4><h5 id=\"1-1、ConcurrentHashMap的put方法\"><a href=\"#1-1、ConcurrentHashMap的put方法\" class=\"headerlink\" title=\"1.1、ConcurrentHashMap的put方法\"></a>1.1、ConcurrentHashMap的put方法</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//基于key，计算hash值</span>\n    <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//因为一个键要计算两个数组的索引，为了避免冲突，这里取高位计算Segment[]的索引</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">>>></span> segmentShift<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> segmentMask<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//判断该索引位的Segment对象是否创建，没有就创建</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>UNSAFE<span class=\"token punctuation\">.</span>getObject          <span class=\"token comment\">// nonvolatile; recheck</span>\n         <span class=\"token punctuation\">(</span>segments<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;&lt;</span> SSHIFT<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> SBASE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//  in ensureSegment</span>\n        s <span class=\"token operator\">=</span> <span class=\"token function\">ensureSegment</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//调用Segmetn的put方法实现元素添加</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"1-2、ConcurrentHashMap的ensureSegment方法\"><a href=\"#1-2、ConcurrentHashMap的ensureSegment方法\" class=\"headerlink\" title=\"1.2、ConcurrentHashMap的ensureSegment方法\"></a>1.2、ConcurrentHashMap的ensureSegment方法</h5><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">&#x2F;&#x2F;创建对应索引位的Segment对象，并返回\nprivate Segment&lt;K,V&gt; ensureSegment(int k) &#123;\n    final Segment&lt;K,V&gt;[] ss &#x3D; this.segments;\n    long u &#x3D; (k &lt;&lt; SSHIFT) + SBASE; &#x2F;&#x2F; raw offset\n    Segment&lt;K,V&gt; seg;\n    &#x2F;&#x2F;获取，如果为null，即创建\n    if ((seg &#x3D; (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u)) &#x3D;&#x3D; null) &#123;\n        &#x2F;&#x2F;以0角标位的Segment为模板\n        Segment&lt;K,V&gt; proto &#x3D; ss[0]; &#x2F;&#x2F; use segment 0 as prototype\n        int cap &#x3D; proto.table.length;\n        float lf &#x3D; proto.loadFactor;\n        int threshold &#x3D; (int)(cap * lf);\n        HashEntry&lt;K,V&gt;[] tab &#x3D; (HashEntry&lt;K,V&gt;[])new HashEntry[cap];\n        &#x2F;&#x2F;获取，如果为null，即创建\n        if ((seg &#x3D; (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))\n            &#x3D;&#x3D; null) &#123; &#x2F;&#x2F; recheck\n            &#x2F;&#x2F;创建\n            Segment&lt;K,V&gt; s &#x3D; new Segment&lt;K,V&gt;(lf, threshold, tab);\n            &#x2F;&#x2F;自旋方式，将创建的Segment对象放到Segment[]中，确保线程安全\n            while ((seg &#x3D; (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))\n                   &#x3D;&#x3D; null) &#123;\n                if (UNSAFE.compareAndSwapObject(ss, u, null, seg &#x3D; s))\n                    break;\n            &#125;\n        &#125;\n    &#125;\n    &#x2F;&#x2F;返回\n    return seg;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"1-3、Segment的put方法\"><a href=\"#1-3、Segment的put方法\" class=\"headerlink\" title=\"1.3、Segment的put方法\"></a>1.3、Segment的put方法</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyIfAbsent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//尝试获取锁，获取成功，node为null，代码向下执行</span>\n    <span class=\"token comment\">//如果有其他线程占据锁对象，那么去做别的事情，而不是一直等待，提升效率</span>\n    <span class=\"token comment\">//scanAndLockForPut 稍后分析</span>\n    <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> node <span class=\"token operator\">=</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span>\n        <span class=\"token function\">scanAndLockForPut</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">V</span> oldValue<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//取hash的低位，计算HashEntry[]的索引</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取索引位的元素对象</span>\n        <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> first <span class=\"token operator\">=</span> <span class=\"token function\">entryAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//获取的元素对象不为空</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">K</span> k<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//如果是重复元素，覆盖原值</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span>\n                    <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    oldValue <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>onlyIfAbsent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                        <span class=\"token operator\">++</span>modCount<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token comment\">//如果不是重复元素，获取链表的下一个元素，继续循环遍历链表</span>\n                e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//如果获取到的元素为空</span>\n                <span class=\"token comment\">//当前添加的键值对的HashEntry对象已经创建</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    node<span class=\"token punctuation\">.</span><span class=\"token function\">setNext</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//头插法关联即可</span>\n                <span class=\"token keyword\">else</span>\n                    <span class=\"token comment\">//创建当前添加的键值对的HashEntry对象</span>\n                    node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//添加的元素数量递增</span>\n                <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//判断是否需要扩容</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">></span> threshold <span class=\"token operator\">&amp;&amp;</span> tab<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> MAXIMUM_CAPACITY<span class=\"token punctuation\">)</span>\n                    <span class=\"token comment\">//需要扩容</span>\n                    <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    <span class=\"token comment\">//不需要扩容</span>\n                    <span class=\"token comment\">//将当前添加的元素对象，存入数组角标位，完成头插法添加元素</span>\n                    <span class=\"token function\">setEntryAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">++</span>modCount<span class=\"token punctuation\">;</span>\n                count <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n                oldValue <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//释放锁</span>\n        <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"1-4、Segment的scanAndLockForPut方法\"><a href=\"#1-4、Segment的scanAndLockForPut方法\" class=\"headerlink\" title=\"1.4、Segment的scanAndLockForPut方法\"></a>1.4、Segment的scanAndLockForPut方法</h5><blockquote>\n<p>该方法在线程没有获取到锁的情况下，去完成HashEntry对象的创建，提升效率</p>\n<p>但是这个操作个人感觉有点累赘了。</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">scanAndLockForPut</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//获取头部元素</span>\n    <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> first <span class=\"token operator\">=</span> <span class=\"token function\">entryForHash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>；\n    <span class=\"token keyword\">int</span> retries <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// negative while locating node</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//获取锁失败</span>\n        <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> f<span class=\"token punctuation\">;</span> <span class=\"token comment\">// to recheck first below</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>retries <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//没有下一个节点，并且也不是重复元素，创建HashEntry对象，不再遍历</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// speculatively create node</span>\n                    node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                retries <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">//重复元素，不创建HashEntry对象，不再遍历</span>\n                retries <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token comment\">//继续遍历下一个节点</span>\n                e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>retries <span class=\"token operator\">></span> MAX_SCAN_RETRIES<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//如果尝试获取锁的次数过多，直接阻塞</span>\n            <span class=\"token comment\">//MAX_SCAN_RETRIES会根据可用cpu核数来确定</span>\n            <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>retries <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n                 <span class=\"token punctuation\">(</span>f <span class=\"token operator\">=</span> <span class=\"token function\">entryForHash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> first<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//如果期间有别的线程获取锁，重新遍历</span>\n            e <span class=\"token operator\">=</span> first <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span> <span class=\"token comment\">// re-traverse if entry changed</span>\n            retries <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2、模拟多线程的代码流程\"><a href=\"#2、模拟多线程的代码流程\" class=\"headerlink\" title=\"2、模拟多线程的代码流程\"></a>2、模拟多线程的代码流程</h4><blockquote>\n<p>这里“通话”和“重地”的哈希值是一样的，那么他们添加时，会存入同一个Segment对象，必然会存在锁竞争</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">ConcurrentHashMap</span> chm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            chm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通话\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"11\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//让第一个线程先启动，进入put方法</span>\n    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            chm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"重地\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"22\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"2-1、多线程环境下的条件断点设置\"><a href=\"#2-1、多线程环境下的条件断点设置\" class=\"headerlink\" title=\"2.1、多线程环境下的条件断点设置\"></a>2.1、多线程环境下的条件断点设置</h5><img src=\"/post/ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(JDK7)/20200417111509.png\" class=\"\">\n\n<img src=\"/post/ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(JDK7)/20200417111424.png\" class=\"\">\n\n<h5 id=\"2-2、运行结果\"><a href=\"#2-2、运行结果\" class=\"headerlink\" title=\"2.2、运行结果\"></a>2.2、运行结果</h5><blockquote>\n<p>会发现两个线程，分别停在不同的断点位置，这就是多线程锁互斥产生的结果</p>\n<p>然后就可以分别让不同的线程向下执行，查看代码走向了。</p>\n</blockquote>\n<img src=\"/post/ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(JDK7)/20200417111834.png\" class=\"\">\n\n\n\n<h3 id=\"四、jdk1-7扩容安全\"><a href=\"#四、jdk1-7扩容安全\" class=\"headerlink\" title=\"四、jdk1.7扩容安全\"></a>四、jdk1.7扩容安全</h3><h4 id=\"1、源码分析-1\"><a href=\"#1、源码分析-1\" class=\"headerlink\" title=\"1、源码分析\"></a>1、源码分析</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oldTable <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> oldCapacity <span class=\"token operator\">=</span> oldTable<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//两倍容量</span>\n    <span class=\"token keyword\">int</span> newCapacity <span class=\"token operator\">=</span> oldCapacity <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    threshold <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">*</span> loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//基于新容量，创建HashEntry数组</span>\n    <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newTable <span class=\"token operator\">=</span>\n        <span class=\"token punctuation\">(</span><span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashEntry</span><span class=\"token punctuation\">[</span>newCapacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sizeMask <span class=\"token operator\">=</span> newCapacity <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   \t<span class=\"token comment\">//实现数据迁移</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> oldCapacity <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> oldTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> sizeMask<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//  Single node on list</span>\n                <span class=\"token comment\">//原位置只有一个元素，直接放到新数组即可</span>\n                newTable<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// Reuse consecutive sequence at same slot</span>\n                <span class=\"token comment\">//=========图一=====================</span>\n                <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> lastRun <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> lastIdx <span class=\"token operator\">=</span> idx<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> last <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n                     last <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                     last <span class=\"token operator\">=</span> last<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> last<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> sizeMask<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">!=</span> lastIdx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        lastIdx <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n                        lastRun <span class=\"token operator\">=</span> last<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token comment\">//=========图一=====================</span>\n                \n                <span class=\"token comment\">//=========图二=====================</span>\n                newTable<span class=\"token punctuation\">[</span>lastIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lastRun<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//=========图二=====================</span>\n                <span class=\"token comment\">// Clone remaining nodes</span>\n                <span class=\"token comment\">//=========图三=====================</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span> p <span class=\"token operator\">!=</span> lastRun<span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">V</span> v <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> h <span class=\"token operator\">&amp;</span> sizeMask<span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> n <span class=\"token operator\">=</span> newTable<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//这里旧的HashEntry不会放到新数组</span>\n                    <span class=\"token comment\">//而是基于原来的数据创建了一个新的HashEntry对象，放入新数组</span>\n                    newTable<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token comment\">//=========图三=====================</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//采用头插法，将新元素加入到数组中</span>\n    <span class=\"token keyword\">int</span> nodeIndex <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> sizeMask<span class=\"token punctuation\">;</span> <span class=\"token comment\">// add the new node</span>\n    node<span class=\"token punctuation\">.</span><span class=\"token function\">setNext</span><span class=\"token punctuation\">(</span>newTable<span class=\"token punctuation\">[</span>nodeIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    newTable<span class=\"token punctuation\">[</span>nodeIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    table <span class=\"token operator\">=</span> newTable<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2、图解-1\"><a href=\"#2、图解-1\" class=\"headerlink\" title=\"2、图解\"></a>2、图解</h4><blockquote>\n<p>图一</p>\n</blockquote>\n<img src=\"/post/ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(JDK7)/20200417113823.png\" class=\"\">\n\n<blockquote>\n<p>图二</p>\n</blockquote>\n<img src=\"/post/ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(JDK7)/20200417114240.png\" class=\"\">\n\n<blockquote>\n<p>图三</p>\n</blockquote>\n<img src=\"/post/ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(JDK7)/20200417114954.png\" class=\"\">\n\n\n\n<h3 id=\"五、jdk1-7集合长度获取\"><a href=\"#五、jdk1-7集合长度获取\" class=\"headerlink\" title=\"五、jdk1.7集合长度获取\"></a>五、jdk1.7集合长度获取</h3><h4 id=\"1、源码分析-2\"><a href=\"#1、源码分析-2\" class=\"headerlink\" title=\"1、源码分析\"></a>1、源码分析</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Try a few times to get accurate count. On failure due to</span>\n    <span class=\"token comment\">// continuous async changes in table, resort to locking.</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> segments <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> overflow<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true if size overflows 32 bits</span>\n    <span class=\"token keyword\">long</span> sum<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// sum of modCounts</span>\n    <span class=\"token keyword\">long</span> last <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// previous sum</span>\n    <span class=\"token keyword\">int</span> retries <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// first iteration isn't retry</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//当第5次走到这个地方时，会将整个Segment[]的所有Segment对象锁住</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>retries<span class=\"token operator\">++</span> <span class=\"token operator\">==</span> RETRIES_BEFORE_LOCK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> segments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">ensureSegment</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// force creation</span>\n            <span class=\"token punctuation\">&#125;</span>\n            sum <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n            size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            overflow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> segments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> seg <span class=\"token operator\">=</span> <span class=\"token function\">segmentAt</span><span class=\"token punctuation\">(</span>segments<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>seg <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">//累加所有Segment的操作次数</span>\n                    sum <span class=\"token operator\">+=</span> seg<span class=\"token punctuation\">.</span>modCount<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> seg<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">//累加所有segment中的元素个数 size+=c</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">+=</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                        overflow <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//当这次累加值和上一次累加值一样，证明没有进行新的增删改操作，返回sum</span>\n            <span class=\"token comment\">//第一次last为0，如果有元素的话，这个for循环最少循环两次的</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">==</span> last<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//记录累加的值</span>\n            last <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//如果之前有锁住，解锁</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>retries <span class=\"token operator\">></span> RETRIES_BEFORE_LOCK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> segments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n                <span class=\"token function\">segmentAt</span><span class=\"token punctuation\">(</span>segments<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//溢出，返回int的最大值，否则返回累加的size</span>\n    <span class=\"token keyword\">return</span> overflow <span class=\"token operator\">?</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">:</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":null,"text":"一、Unsafe介绍1、Unsafe简介Unsafe类相当于是一个java语言中的后门类，提供了硬件级别的原子操作，所以在一些并发编程中被大量使用。jdk已经作出说明，该类对程序员而言不是一个安全操作，在后续的jdk升级过程中，可能会禁用该类。所以这个类的使用是一把双刃剑，实际项...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"源码分析","slug":"源码分析","count":5,"path":"api/tags/源码分析.json"},{"name":"多线程","slug":"多线程","count":3,"path":"api/tags/多线程.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81Unsafe%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">一、Unsafe介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81Unsafe%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1、Unsafe简介</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81Unsafe-Api\"><span class=\"toc-text\">2、Unsafe Api</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E4%BB%A3%E7%A0%81%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">3、代码演示</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1%E3%80%81%E5%9B%BE%E8%A7%A3%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">3.1、图解说明</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81jdk1-7%E5%AE%B9%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">二、jdk1.7容器初始化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">1、源码解析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%9B%BE%E8%A7%A3\"><span class=\"toc-text\">2、图解</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81Segment%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">3、Segment是什么？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81HashEntry%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">4、HashEntry是什么？</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81jdk1-7%E6%B7%BB%E5%8A%A0%E5%AE%89%E5%85%A8\"><span class=\"toc-text\">三、jdk1.7添加安全</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">1、源码分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1%E3%80%81ConcurrentHashMap%E7%9A%84put%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.1、ConcurrentHashMap的put方法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2%E3%80%81ConcurrentHashMap%E7%9A%84ensureSegment%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.2、ConcurrentHashMap的ensureSegment方法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3%E3%80%81Segment%E7%9A%84put%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.3、Segment的put方法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-4%E3%80%81Segment%E7%9A%84scanAndLockForPut%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.4、Segment的scanAndLockForPut方法</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%A8%A1%E6%8B%9F%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">2、模拟多线程的代码流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-1%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E6%9D%A1%E4%BB%B6%E6%96%AD%E7%82%B9%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">2.1、多线程环境下的条件断点设置</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-2%E3%80%81%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">2.2、运行结果</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81jdk1-7%E6%89%A9%E5%AE%B9%E5%AE%89%E5%85%A8\"><span class=\"toc-text\">四、jdk1.7扩容安全</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-1\"><span class=\"toc-text\">1、源码分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%9B%BE%E8%A7%A3-1\"><span class=\"toc-text\">2、图解</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81jdk1-7%E9%9B%86%E5%90%88%E9%95%BF%E5%BA%A6%E8%8E%B7%E5%8F%96\"><span class=\"toc-text\">五、jdk1.7集合长度获取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-2\"><span class=\"toc-text\">1、源码分析</span></a></li></ol></li></ol>","author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"ConcurrentHashMap源码分析(JDK8)","uid":"f6da82311c70124223da9323fdd70f40","slug":"ConcurrentHashMap源码分析(JDK8)","date":"2021-05-03T16:02:52.000Z","updated":"2022-09-15T14:22:17.516Z","comments":true,"path":"api/articles/ConcurrentHashMap源码分析(JDK8).json","keywords":null,"cover":[],"text":"一、jdk1.8容器初始化1、源码分析 在jdk8的ConcurrentHashMap中一共有5个构造方法，这四个构造方法中都没有对内部的数组做初始化， 只是对一些变量的初始值做了处理 jdk8的ConcurrentHashMap的数组初始化是在第一次添加元素时完成 //没有维护...","link":"","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"源码分析","slug":"源码分析","count":5,"path":"api/tags/源码分析.json"},{"name":"多线程","slug":"多线程","count":3,"path":"api/tags/多线程.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"计算机网络","uid":"293c17b4d2a4292133cc4d1ffd7f8725","slug":"计算机网络","date":"2021-05-03T12:29:51.000Z","updated":"2022-09-15T14:22:17.568Z","comments":true,"path":"api/articles/计算机网络.json","keywords":null,"cover":[],"text":"计算机网络Http和Https的区别？ 其实HTTPS就是从HTTP加上加密处理（一般是SSL安全通信线路）+认证+完整性保护 区别： https需要拿到ca证书，需要钱的 端口不一样，http是80，https443 http是超文本传输协议，信息是明文传输，https则是具有...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"计算机基础","slug":"计算机基础","count":4,"path":"api/tags/计算机基础.json"},{"name":"计算机网络","slug":"计算机网络","count":1,"path":"api/tags/计算机网络.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}