{"title":"ActiveMQ整合SpringBoot","uid":"a4246540661d717dae121d955eded9b9","slug":"ActiveMQ整合SpringBoot","date":"2021-05-03T21:16:08.000Z","updated":"2022-09-15T14:22:17.512Z","comments":true,"path":"api/articles/ActiveMQ整合SpringBoot.json","keywords":null,"cover":null,"content":"<h1 id=\"ActiveMQ-整合-SpringBoot\"><a href=\"#ActiveMQ-整合-SpringBoot\" class=\"headerlink\" title=\"ActiveMQ 整合 SpringBoot\"></a>ActiveMQ 整合 SpringBoot</h1><h5 id=\"引入-activemq-依赖\"><a href=\"#引入-activemq-依赖\" class=\"headerlink\" title=\"引入 activemq 依赖\"></a>引入 activemq 依赖</h5><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-activemq<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>配置 <code>yml</code> 文件</p>\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\">server:\n  port: 7777\n\nspring:\n  activemq:\n    broker-url: tcp:&#x2F;&#x2F;localhost:61617\n    user: admin\n    password: admin\n  jms:\n    # false &#x3D; Queue\n    # true &#x3D; Topic 不写默认值 false\n    pub-sub-domain: false\n\nqueue-name: boot-activemq-queue\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>因为有时候公司框架的原因，很多都无法使用，所以当配置文件无法使用时，可以使用<code>JavaConfig</code> 的方式配置</p>\n</blockquote>\n<ul>\n<li>配置连接工厂</li>\n<li>配置存放主题和队列的 Container</li>\n<li>有了容器，自然就是创建<code>主题</code>或者是<code>队列</code></li>\n<li>最后要有一个 <code>JmsMessagingTemplate</code>  来发送消息</li>\n<li>再设置一个接收消息的服务</li>\n<li>因为有时候需要支持使用POJO来包装消息，默认的消息转换器不合适，所以要注入一个Json转换消息的转换器</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AmqConfig</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1. 配置连接工厂</span>\n        <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConnectionFactory</span> <span class=\"token function\">connectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">AmqServer</span> amqServer <span class=\"token operator\">=</span> serverDiscovery<span class=\"token punctuation\">.</span><span class=\"token function\">findServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> brokerUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"tcp://\"</span> <span class=\"token operator\">+</span> amqServer<span class=\"token punctuation\">.</span><span class=\"token function\">getIp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\":7018\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> amqServer<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> amqServer<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url：&#123;&#125;, 账号:&#123;&#125;, 密码: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> brokerUrl<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置账号密码</span>\n        <span class=\"token class-name\">ActiveMQConnectionFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveMQConnectionFactory</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> brokerUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 当需要发送接收序列化的POJO类时，在新版本中需要相信类所在包，所以打开此开关</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setTrustAllPackages</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">// 2. 配置 containerFactory</span>\n    <span class=\"token comment\">// 在Topic模式中，对消息的监听需要对containerFactory进行配置</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topicListener\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JmsListenerContainerFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">topicJmsListenerContainerFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConnectionFactory</span> connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">SimpleJmsListenerContainerFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleJmsListenerContainerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置为true表示存放 topic</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setPubSubDomain</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 3. 创建一个收发消息的主题</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topic\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Topic</span> <span class=\"token function\">topic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveMQTopic</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AmqDestination</span><span class=\"token punctuation\">.</span>SOPS_TOPIC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">// 4. 创建一个操作消息的JmsMessagingtemplate</span>\n        <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JmsMessagingTemplate</span> <span class=\"token function\">jmsMessagingTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JmsMessagingTemplate</span><span class=\"token punctuation\">(</span><span class=\"token function\">connectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>  \n    <span class=\"token comment\">// 5. 注入消息转化器，使其可以转换序列化的类</span>\n        <span class=\"token comment\">/**\n     *\n     *  Serialize message content to json using TextMessage\n     *  使用 TextMessage 转化成 序列化后的 json\n     *  注意要POJO类要序列化\n     * */</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MessageConverter</span> <span class=\"token function\">jacksonJmsMessageConverter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">MappingJackson2MessageConverter</span> converter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MappingJackson2MessageConverter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        converter<span class=\"token punctuation\">.</span><span class=\"token function\">setTargetType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageType</span><span class=\"token punctuation\">.</span>TEXT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        converter<span class=\"token punctuation\">.</span><span class=\"token function\">setTypeIdPropertyName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> converter<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>需要 <code>Spring Boot</code> 支持消息队列，在启动类上加上 <code>@EnableJms</code> 注解就可以实现</p>\n<h3 id=\"生产者使用方法\"><a href=\"#生产者使用方法\" class=\"headerlink\" title=\"生产者使用方法\"></a>生产者使用方法</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AmqController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JmsMessagingTemplate</span> jmsMessagingTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Topic</span> topic<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/send\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TlncMessageDto</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">TlncMessageDto</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t\n    <span class=\"token comment\">// 因为已经注入了Json转化器，所以可以直接传入Object作为消息的payload</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Destination</span> destination<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> payload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        jmsMessagingTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"对应消息对象\"><a href=\"#对应消息对象\" class=\"headerlink\" title=\"对应消息对象\"></a>对应消息对象</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// JsonInclude表示对null字段的序列化策略，ALways表示总是序列化null字段，NON_NULL表示不序列化</span>\n<span class=\"token annotation punctuation\">@JsonInclude</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonInclude<span class=\"token punctuation\">.</span>Include</span><span class=\"token punctuation\">.</span>ALWAYS<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// JsonPropertyOrder 表示序列化和反序列化的时候，字段的顺序</span>\n<span class=\"token annotation punctuation\">@JsonPropertyOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"listType\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"params\"</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token comment\">// 需要实现Serializable接口来序列化</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TlncMessageDto</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">// 表示Json字段名对应类的这个成员变量</span>\n    <span class=\"token annotation punctuation\">@JsonProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listType\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> listType<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@JsonProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"params\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ParamsDto</span> params<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 表示序列化时如果没发现匹配的字段可以忽略</span>\n    <span class=\"token annotation punctuation\">@JsonIgnore</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> additionalProperties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">201428069813570775L</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 表示额外字段，可以获得成员变量没有的字段</span>\n    <span class=\"token annotation punctuation\">@JsonAnyGetter</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAdditionalProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>additionalProperties<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 表示添加额外的字段，配合@JsonAnyGetter使用</span>\n    <span class=\"token annotation punctuation\">@JsonAnySetter</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAdditionalProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>additionalProperties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"还可以定时投放消息\"><a href=\"#还可以定时投放消息\" class=\"headerlink\" title=\"还可以定时投放消息\"></a>还可以定时投放消息</h5><p>在方法上添加 @Scheduled 注解，启动主启动类即可，3000L指的是3秒钟</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MQService</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JmsMessagingTemplate</span> jmsMessagingTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Queue</span> queue<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Scheduled</span><span class=\"token punctuation\">(</span>fixedDelay <span class=\"token operator\">=</span> <span class=\"token number\">3000L</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendScheduledMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        jmsMessagingTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token string\">\"holy shit!!!!!\"</span> <span class=\"token operator\">+</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"消费者使用方法\"><a href=\"#消费者使用方法\" class=\"headerlink\" title=\"消费者使用方法\"></a>消费者使用方法</h3><p>消费者只需要在方法上添加 <code>@JmsListener</code> 即可</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span>   <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@JmsListener</span><span class=\"token punctuation\">(</span>destination <span class=\"token operator\">=</span> <span class=\"token string\">\"$&#123;queue-name&#125;\"</span><span class=\"token punctuation\">,</span> containerFactory <span class=\"token operator\">=</span> <span class=\"token string\">\"topicListener\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 参数直接写对应的类</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TlncMessageDto</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// TO-DO</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":null,"text":"ActiveMQ 整合 SpringBoot引入 activemq 依赖&lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-act...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"中间件","slug":"中间件","count":5,"path":"api/tags/中间件.json"},{"name":"ActiveMQ","slug":"ActiveMQ","count":1,"path":"api/tags/ActiveMQ.json"},{"name":"使用心得","slug":"使用心得","count":2,"path":"api/tags/使用心得.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ActiveMQ-%E6%95%B4%E5%90%88-SpringBoot\"><span class=\"toc-text\">ActiveMQ 整合 SpringBoot</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5-activemq-%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">引入 activemq 依赖</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E4%BA%A7%E8%80%85%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">生产者使用方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E5%BA%94%E6%B6%88%E6%81%AF%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">对应消息对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%BF%98%E5%8F%AF%E4%BB%A5%E5%AE%9A%E6%97%B6%E6%8A%95%E6%94%BE%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">还可以定时投放消息</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B6%88%E8%B4%B9%E8%80%85%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">消费者使用方法</span></a></li></ol></li></ol></li></ol>","author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"英文面试合集","uid":"727fdd30d270ab93f20b48b627af8396","slug":"英文面试合集","date":"2021-06-05T11:16:08.000Z","updated":"2022-09-15T14:22:17.564Z","comments":true,"path":"api/articles/英文面试合集.json","keywords":null,"cover":null,"text":"英文面试合集自我介绍Good afternon sir&#x2F;madam, it&#39;s my pleasure to introduce myself. My name&#39;s Xiehuake, In the summer of 2021, I graduated...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[],"tags":[{"name":"面试","slug":"面试","count":3,"path":"api/tags/面试.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"不同中间件的高并发架构","uid":"1b5a7d45e32f32d8b53151bc92581ac8","slug":"不同中间件的高并发架构","date":"2021-05-03T21:13:48.000Z","updated":"2022-09-15T14:22:17.560Z","comments":true,"path":"api/articles/不同中间件的高并发架构.json","keywords":null,"cover":[],"text":"不同中间件的高并发MySQL的高并发对于高并发阶段，MySQL 要做的就是基于主从复制架构，进行读写分离 MySQL主从复制的原理主库将变更写入 binlog 日志，然后从库连接到主库之后，从库有一个 IO 线程，将主库的 binlog 日志拷贝到自己本地，写入一个 relay ...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"系统设计","slug":"系统设计","count":2,"path":"api/tags/系统设计.json"},{"name":"高并发","slug":"高并发","count":1,"path":"api/tags/高并发.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}