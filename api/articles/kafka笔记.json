{"title":"kafka笔记","uid":"eaecd65a22befc3caf0b52e72c0ff526","slug":"kafka笔记","date":"2022-04-05T23:26:59.000Z","updated":"2022-09-15T14:22:17.544Z","comments":true,"path":"api/articles/kafka笔记.json","keywords":null,"cover":[],"content":"<h1 id=\"Kafka笔记\"><a href=\"#Kafka笔记\" class=\"headerlink\" title=\"Kafka笔记\"></a>Kafka笔记</h1><p>工作中有大量的kafka使用场景，学习记录一下kafka的架构和原理</p>\n<h4 id=\"为什么要引入消息队列\"><a href=\"#为什么要引入消息队列\" class=\"headerlink\" title=\"为什么要引入消息队列\"></a>为什么要引入消息队列</h4><ul>\n<li>各个组件间的解藕</li>\n<li>流程之间的异步处理</li>\n<li>流量控制</li>\n</ul>\n<h4 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h4><ul>\n<li><strong>Broker</strong>：broker指的就是一个kafka服务器</li>\n<li><strong>Producer</strong>：消息生产者，就是向broker发送消息的客户端</li>\n<li><strong>Consumer</strong>：消息消费者，向kafka borker拉取消息的客户端</li>\n<li><strong>Consumer group</strong>：消费者组，由多个消费者组成，不同组通过group id进行区分，一条消息只能被一个组里面的某个消费者消费，但是不同组之间可以同时消费一条消息，换句话来说<strong>消费者组是逻辑上的一个订阅者</strong></li>\n<li><strong>topic</strong>：主题队列，可以理解为一个存放特定消息的队列</li>\n<li><strong>partition</strong>：一个topic可以分布在不同的broker上，用不同partition表示，这是为了方便拓展和提高并发<ul>\n<li>拓展：一个topic可以有多个partition，所以可以通过拓展partition也就是拓展机器来应付增长的数量</li>\n<li>提高并发：不是以topic为读写单位，而是已partition为读写单位，可以多个消费者组并发消费数据，提高消息的处理效率</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Kafka消息存储\"><a href=\"#Kafka消息存储\" class=\"headerlink\" title=\"Kafka消息存储\"></a>Kafka消息存储</h4><h5 id=\"分区-partition\"><a href=\"#分区-partition\" class=\"headerlink\" title=\"分区(partition)\"></a>分区(partition)</h5><p>对于一个topic，可以将数据分散存储在多个服务器上，每一部分称为一个<code>分区(partition)</code>，通过参数<code>num.partition</code> 来进行控制，默认为1，</p>\n<h5 id=\"分区结构\"><a href=\"#分区结构\" class=\"headerlink\" title=\"分区结构\"></a>分区结构</h5><p>分区设计：分段+索引的结构设计，一个分区由多个段组成</p>\n<img src=\"/post/kafka%E7%AC%94%E8%AE%B0/1.png\" class=\"\" width=\"1\">\n\n<ul>\n<li>Segment：文件段</li>\n<li>.log：日志文体，在kafka中把数据文件就叫做日志文件，</li>\n<li>.index/.：位移索引</li>\n<li>.timeindex：时间戳索引</li>\n</ul>\n<p>partition 全局的第一个 segment 从 0 开始，后续每个 segment 文件名为上一个segment 文件最后一条消息的 <code>offset</code> 值。<br>数值大小为 64 位，20 位数字字符长度，没有数字用 0 填充</p>\n<p>kafka在写入日志文件时，同时会维护索引文件，在往日志文件中写入了一定量的数据后，就会往索引文件中写入一条索引，所以索引本身是<strong>稀疏</strong>格式的索引，索引文件里的数据是按照位移和时间戳升序排序的，所以kafka在查找索引的时候，会用<strong>二分查找</strong>，时间复杂度是O(logN)，找到索引，就可以在.log文件里定位到数据了，如下图所示，[1, 3, 4, 8…]表示消息在segment的index, [0, 348, 476…]表示数据在磁盘中的物理偏移地址。</p>\n<p>索引文件中 [3, 348] , 3 在 .log 文件中表示第 3 个消息，那么在全局 partition 表中表示为 160420 + 3 = 160423。</p>\n<img src=\"/post/kafka%E7%AC%94%E8%AE%B0/2.png\" class=\"\" title=\"索引结构\">\n\n<blockquote>\n<p>参数 log.index.interval.bytes 控制写入多少量的日志后添加索引，默认值为4KB</p>\n</blockquote>\n<h4 id=\"Kafka生产者\"><a href=\"#Kafka生产者\" class=\"headerlink\" title=\"Kafka生产者\"></a>Kafka生产者</h4><p>生产者发送消息流程</p>\n<img src=\"/post/kafka%E7%AC%94%E8%AE%B0/3.png\" class=\"\" title=\"生产者发送流程\">\n\n<h5 id=\"分区器partitionor\"><a href=\"#分区器partitionor\" class=\"headerlink\" title=\"分区器partitionor\"></a>分区器partitionor</h5><p>假设知道了要发往哪个分区，一般情况下，kafka都是以集群的形式部署的，而写入操作是会写到leader节点上的，那怎么知道哪个broker上的分区是这个分区的leader呢，使用的是partitionor分区器，来获取kafka集群的元数据，从而知道哪个是leader partition</p>\n<h5 id=\"分区的计算\"><a href=\"#分区的计算\" class=\"headerlink\" title=\"分区的计算\"></a>分区的计算</h5><p>生产者需要把一个batch的消息发送到Topic的某个partition中，那到底发送到哪个分区中呢，这个是和消息的<code>key</code>和分区器有关的，</p>\n<ul>\n<li><strong>默认分区器(DefaultPartitioner)</strong><ul>\n<li>当没有给消息设置key时，消息会以<code>带有粘性的随机</code>的形式发送到下一个分区中</li>\n<li>也可以给消息指定一个key，会根据<code>key</code>计算出hash值，然后对分区数取余，这样可以保证同样的key肯定会发送到同一个分区上</li>\n</ul>\n</li>\n<li><strong>轮询分区器(RoundRobinPartitioner)</strong> ：字面意思，以轮询的形式，获取该topic的下一个分区进行发送</li>\n<li><strong>根据业务自定义自己的分区器</strong>：实现接口<code>Partitioner</code>，并在初始化生产者时，把自己的实现类放进参数map中的<code>partitioner.class</code>即可</li>\n</ul>\n<h5 id=\"缓冲区\"><a href=\"#缓冲区\" class=\"headerlink\" title=\"缓冲区\"></a><strong>缓冲区</strong></h5><p>kafka并不会立即将消息发送出去，而是包装成RecordBatch，放入缓冲区<code>BufferPool</code>中</p>\n<blockquote>\n<p>缓存区的模型和内存和其他细节，打算放在kafka源码阅读笔记中</p>\n</blockquote>\n<h5 id=\"Sender发送时机\"><a href=\"#Sender发送时机\" class=\"headerlink\" title=\"Sender发送时机\"></a>Sender发送时机</h5><p>先了解两个参数</p>\n<ul>\n<li><code>linger.ms</code>：发送延迟时间，默认0</li>\n<li><code>batch.size</code>：每个RecordBatch的最大容量，默认：16384，16K</li>\n</ul>\n<p>为减少负载和客户端的请求数量，生产者不会一条一条发送，而是会逗留一段时间批量发送。batch.size和linger.ms满足任何一个条件都会发送</p>\n<h5 id=\"生产者投递消息的可靠性\"><a href=\"#生产者投递消息的可靠性\" class=\"headerlink\" title=\"生产者投递消息的可靠性\"></a>生产者投递消息的可靠性</h5><p>为了能保证kafka生产者能够尽最大可能的不丢失发送的数据，kafka加入了ack确认机制，这涉及到两个重要的参数</p>\n<ul>\n<li><strong>acks</strong>：acks确认机制<ul>\n<li>value=0，表示生产者在消息写入之前不会等待来自服务器的任何应答，一旦消息发送失败，生产者无法感知到</li>\n<li><strong>value=1（默认）</strong>，表示生产者只要接收到partition leader的ack确认，就认为消息写入成功了，如果写入失败，会收到错误的响应，会重新发送消息</li>\n<li>value=all，表示生产者只有自接收到partition leader和partition的ISR列表所有的从节点</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"高并发网络架构\"><a href=\"#高并发网络架构\" class=\"headerlink\" title=\"高并发网络架构\"></a>高并发网络架构</h4><p>kafka能支持超大并发的请求，有很大的功劳来自于kakfa基于<code>Reactor</code> 事件处理设计模式的超高并发网络架构</p>\n<img src=\"/post/kafka%E7%AC%94%E8%AE%B0/4.png\" class=\"\" title=\"kafka网络架构\">\n\n<h5 id=\"Acceptor-线程\"><a href=\"#Acceptor-线程\" class=\"headerlink\" title=\"Acceptor 线程\"></a>Acceptor 线程</h5><p>在Reactor网络设计模式中，会有一个<code>Dispatcher</code>模块用来接收各种请求并请求分发给对应的handler，而Acceptor线程就起到Dispatcher的作用。</p>\n<p>在kafka broker中只会创建一个Acceptor线程用来创建连接，并将接收到的请求放到到Processor线程中去进行处理，所以Acceptor线程做的工作非常轻量</p>\n<h5 id=\"Process-线程\"><a href=\"#Process-线程\" class=\"headerlink\" title=\"Process 线程\"></a>Process 线程</h5><p>真正创建网络连接以及分发网络请求是由 Processor 线程来完成的，每个Process线程在创建时都会创建三个队列</p>\n<ul>\n<li><strong>newConnections 队列</strong>: 它主要是用来保存要创建的新连接信息，也就是SocketChannel 对象，队列长度大小为20。每当 Processor 线程接收到新的连接请求时，都会将对应的 SocketChannel 对象放入队列，等到后面创建连接时，从该队列中获取 SocketChannel，然后注册新的连接。</li>\n<li><strong>ResponseQueue 队列：</strong>它主要是存放需要返回给Request 发送方的所有 Response 对象。每个 Processor 线程都会维护自己的 Response 队列</li>\n<li><strong>inflightResponse 队列</strong>：它是一个临时的 Response 队列， 当 Processor 线程将 Repsonse 返回给 Client 之后，要将 Response 放入该队列。它存在的意义：由于有些 Response callback要在 Response 被发送回 Request 发送方后，才能执行，因此需要暂存到临时队列</li>\n</ul>\n<h5 id=\"KafkaRequestHandler-线程\"><a href=\"#KafkaRequestHandler-线程\" class=\"headerlink\" title=\"KafkaRequestHandler 线程\"></a>KafkaRequestHandler 线程</h5><p>而具体的读写IO请求是由<code>KafkaRequestHandler</code>来进行处理的，默认会有8个KafkaRequestHandler被维护在 RequestHandlerPool中，通过参数<code>num.io.threads</code>来控制</p>\n<h5 id=\"请求处理流程\"><a href=\"#请求处理流程\" class=\"headerlink\" title=\"请求处理流程\"></a>请求处理流程</h5><ul>\n<li>客户端、其他broker请求连接都会被Acceptor线程接管<ul>\n<li>Acceptor线程在首次初始化时，会创建出Java NIO Selector、ServerSocketChannel，并将ServerSocketChannel的OP_ACCPECT事件注册到Selector上，并创建默认3个processor线程，可以由<code>num.network.threads</code>控制</li>\n<li>Acceptor会不断的将连接请求SocketChannel放入到 Processor线程中的newConnections队列中</li>\n</ul>\n</li>\n<li>Processor 线程源源不断的从newConnections队列中poll SocketChannel，并将其OP_WRITE/OP_READ事件注册到Selector中</li>\n<li>这样客户端就可以源源不断的发送请求了，而processor线程就不断通过Selector获取到就绪的IO事件，构建 Request 对象并放入Requestchannel中的 RequestQueue中</li>\n<li>KafkaRequestHandler 线程会不断的从<code>RequestQueue 队列</code>中获取请求，然后处理逻辑，比如读写消息，处理完成后，将结果包装成 Response ，放入ResponseQueue 中</li>\n<li>最后 Processor 线程通过 Request 中的 ProcessorID 不停地从 Response 队列中来定位并取出 Response 对象，返回结果</li>\n</ul>\n<h4 id=\"Kafka消费者\"><a href=\"#Kafka消费者\" class=\"headerlink\" title=\"Kafka消费者\"></a>Kafka消费者</h4><h5 id=\"offset\"><a href=\"#offset\" class=\"headerlink\" title=\"offset\"></a>offset</h5><p>每个消费者都在内存中保存着对topic分区的消费offset，定期会提交offset，会往<code>__consumer_offsets</code>这个kafka内部topic提交，key为<code>group.id+topic+分区号</code>， value为对应的offset</p>\n<p>每隔一段时间，kafka会对相同key对offset进行合并，只保留最大的那个offset</p>\n<blockquote>\n<p>Kafka 0.8版本之前offset是保存在zk上的，之后才是保存在本地内存中</p>\n</blockquote>\n<h5 id=\"从哪开始消费\"><a href=\"#从哪开始消费\" class=\"headerlink\" title=\"从哪开始消费\"></a>从哪开始消费</h5><p>offset就是用来控制当消费者应该从分区中的哪里进行消费的，如果当前分区没有该<code>group.id</code>的offset时，同时受另一个参数<code>auto.offset.reset</code>的影响</p>\n<ul>\n<li>earliest：无提交的offset时，从头开始消费</li>\n<li>latest：无提交的offset时，消费新产生的数据</li>\n<li>none：没有提交的offset时，抛出异常</li>\n</ul>\n<h5 id=\"消费者组\"><a href=\"#消费者组\" class=\"headerlink\" title=\"消费者组\"></a>消费者组</h5><p>消费者是以 consumer group 消费者组的方式工作，由一个或者多个消费者组成一个组， 共同消费一个 topic。每个分区在同一时间只能由 group 中的一个消费者读取，但是多个 group 可以同时消费这个 partition。</p>\n<img src=\"/post/kafka%E7%AC%94%E8%AE%B0/5.jpeg\" class=\"\" title=\"消费者组\">\n\n<h5 id=\"Coordinator\"><a href=\"#Coordinator\" class=\"headerlink\" title=\"Coordinator\"></a>Coordinator</h5><p>一个消费者组中哪个消费者消费哪几个partition，也就是分区分配策略，以及如果某些消费者挂了应该怎么重新分配其消费的分区等待问题，需要有统一的管理，而这由Coordinator来实现</p>\n<p>每个consumer group都会选择一个broker作为自己的coordinator，他是负责监控这个消费组里的各个消费者的心跳，以及判断是否宕机，然后开启rebalance的</p>\n<h6 id=\"如何选择Coordinator\"><a href=\"#如何选择Coordinator\" class=\"headerlink\" title=\"如何选择Coordinator\"></a>如何选择Coordinator</h6><p>首先对groupId进行hash，接着对<code>_consumer_offsets</code>的分区数量取模，默认是50，_consumer_offsets的分区数可以通过<code>offsets.topic.num.partitions</code>来设置，找到分区以后，这个分区所在的broker机器就是coordinator机器</p>\n<h5 id=\"消费方案的确定流程\"><a href=\"#消费方案的确定流程\" class=\"headerlink\" title=\"消费方案的确定流程\"></a>消费方案的确定流程</h5><ul>\n<li>每个consumer都发送<code> join-group</code>请求到Coordinator</li>\n<li>然后Coordinator从consumer group中选择<strong>第一个成功加入Group的consumer</strong>作为leader</li>\n<li><strong>具体的消费策略是由leader consumer来制定的</strong>，所以Coordinator把consumer group情况发送给这个leader</li>\n<li>Coordinator会给所有发送join-group的consumer发送response，consumer收到Coordinator的response后，如果是leader，就会将具体的消费策略发送给Coordinator，而其他follower则发送一个空列表</li>\n<li>接着Coordinator就把消费方案下发给各个consumer，他们会从指定的分区的 leader broker 开始进行socket连接以及消费消息</li>\n</ul>\n<h5 id=\"分区分配策略\"><a href=\"#分区分配策略\" class=\"headerlink\" title=\"分区分配策略\"></a>分区分配策略</h5><ul>\n<li><p><strong>Range</strong>：按照范围依次给各个消费者均匀的分配消费分区</p>\n<img src=\"/post/kafka%E7%AC%94%E8%AE%B0/6.jpeg\" class=\"\" title=\"range分区分区分配策略\">\n\n<p>缺点：同一个组内的消费者消费的分区可能差距很大，如下图所示</p>\n<img src=\"/post/kafka%E7%AC%94%E8%AE%B0/7.jpeg\" class=\"\" title=\"不同消费者消费的问题\"></li>\n<li><p><strong>round-robin轮询分配</strong>：按顺序一个一个的分配给消费者，直到分配完成</p>\n<img src=\"/post/kafka%E7%AC%94%E8%AE%B0/8.jpeg\" class=\"\" title=\"轮询\">\n\n<blockquote>\n<p>range和轮询都有一个缺点，就是在某个消费者挂了之后，重新分配消费分区可能会导致原本自己消费的分区被分给了其他消费者，相当于丢失了分区，比如当consumerA挂了，对于range来说，partition0~3会分配给consumerB，4～6会分配给consumerC，这导致了B丢失了原本消费的partition4，同理，对于round-robin来说B丢失了分区1，C丢失了分区2</p>\n</blockquote>\n</li>\n<li><p><strong>sticky</strong>：sticky策略在rebalance的时候，会在保持原有消费的分区的情况下，再把多余的分区均匀的分配给剩下的消费者</p>\n</li>\n</ul>\n<h4 id=\"Kafka高可用、高性能机制\"><a href=\"#Kafka高可用、高性能机制\" class=\"headerlink\" title=\"Kafka高可用、高性能机制\"></a>Kafka高可用、高性能机制</h4><p><strong>高可⽤性</strong>(High Availability)，指系统无间断地执⾏其功能的能力，代表系统的可⽤性程度。Kafka从0.8版本开始提供了高可⽤机制， 可保障⼀个或多个Broker宕机后，其他Broker及所有Partition都能继续提供服务，且存储的消息不丢失。所以kafka使用<strong>多机备份</strong>和<strong>消息应答机制</strong></p>\n<h5 id=\"多机备份\"><a href=\"#多机备份\" class=\"headerlink\" title=\"多机备份\"></a>多机备份</h5><p>多机备份指的是对于某个partition，可以存在多个副本，副本由一个leader和多个fllower组成，消息的写入只会写入到leader中</p>\n<h5 id=\"高可用机制\"><a href=\"#高可用机制\" class=\"headerlink\" title=\"高可用机制\"></a>高可用机制</h5>","feature":null,"text":"Kafka笔记工作中有大量的kafka使用场景，学习记录一下kafka的架构和原理 为什么要引入消息队列 各个组件间的解藕 流程之间的异步处理 流量控制 核心概念 Broker：broker指的就是一个kafka服务器 Producer：消息生产者，就是向broker发送消息的客...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"中间件","slug":"中间件","count":5,"path":"api/tags/中间件.json"},{"name":"kafka","slug":"kafka","count":1,"path":"api/tags/kafka.json"},{"name":"原理","slug":"原理","count":1,"path":"api/tags/原理.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Kafka%E7%AC%94%E8%AE%B0\"><span class=\"toc-text\">Kafka笔记</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%95%E5%85%A5%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97\"><span class=\"toc-text\">为什么要引入消息队列</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">核心概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Kafka%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">Kafka消息存储</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%8C%BA-partition\"><span class=\"toc-text\">分区(partition)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%8C%BA%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">分区结构</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Kafka%E7%94%9F%E4%BA%A7%E8%80%85\"><span class=\"toc-text\">Kafka生产者</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%8C%BA%E5%99%A8partitionor\"><span class=\"toc-text\">分区器partitionor</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%8C%BA%E7%9A%84%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">分区的计算</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%86%B2%E5%8C%BA\"><span class=\"toc-text\">缓冲区</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Sender%E5%8F%91%E9%80%81%E6%97%B6%E6%9C%BA\"><span class=\"toc-text\">Sender发送时机</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%94%9F%E4%BA%A7%E8%80%85%E6%8A%95%E9%80%92%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7\"><span class=\"toc-text\">生产者投递消息的可靠性</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">高并发网络架构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Acceptor-%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">Acceptor 线程</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Process-%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">Process 线程</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#KafkaRequestHandler-%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">KafkaRequestHandler 线程</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">请求处理流程</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Kafka%E6%B6%88%E8%B4%B9%E8%80%85\"><span class=\"toc-text\">Kafka消费者</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#offset\"><span class=\"toc-text\">offset</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E5%93%AA%E5%BC%80%E5%A7%8B%E6%B6%88%E8%B4%B9\"><span class=\"toc-text\">从哪开始消费</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%B6%88%E8%B4%B9%E8%80%85%E7%BB%84\"><span class=\"toc-text\">消费者组</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Coordinator\"><span class=\"toc-text\">Coordinator</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9Coordinator\"><span class=\"toc-text\">如何选择Coordinator</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%B6%88%E8%B4%B9%E6%96%B9%E6%A1%88%E7%9A%84%E7%A1%AE%E5%AE%9A%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">消费方案的确定流程</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">分区分配策略</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Kafka%E9%AB%98%E5%8F%AF%E7%94%A8%E3%80%81%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">Kafka高可用、高性能机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%9C%BA%E5%A4%87%E4%BB%BD\"><span class=\"toc-text\">多机备份</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">高可用机制</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Spring笔记","uid":"9fe79a5e2d58fcbcba8e87cdea7a0f13","slug":"spring笔记","date":"2022-05-21T12:37:38.000Z","updated":"2022-09-15T14:22:17.556Z","comments":true,"path":"api/articles/spring笔记.json","keywords":null,"cover":[],"text":"Spring笔记Spring核心要点 控制反转IOC：使用Spring之前，对象的使用和创建是绑定在一起的，除了主要的逻辑代码外，还需要为依赖的其他对象做很多复杂的创建工作，引入了Spring之后，就可以将创建和使用分离开，把对象的创建工作交由Spring框架来进行处理，需要用到...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"线程池原理","uid":"3a0a2a0a822e5f2cb6d51229a61d0c76","slug":"线程池原理","date":"2021-06-26T11:16:08.000Z","updated":"2022-09-15T14:22:17.564Z","comments":true,"path":"api/articles/线程池原理.json","keywords":null,"cover":null,"text":"线程池原理","link":"","photos":[],"count_time":{"symbolsCount":5,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"并发编程","slug":"并发编程","count":1,"path":"api/tags/并发编程.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}