{"title":"MySQL之索引底层原理","uid":"8cad178e2e225e1e2dd25040facb3e5a","slug":"MySQL之索引底层原理","date":"2021-05-03T21:08:22.000Z","updated":"2022-09-15T14:22:17.520Z","comments":true,"path":"api/articles/MySQL之索引底层原理.json","keywords":null,"cover":[],"content":"<h3 id=\"InnoDB-页结构\"><a href=\"#InnoDB-页结构\" class=\"headerlink\" title=\"InnoDB 页结构\"></a>InnoDB 页结构</h3><p><code>页</code>是<code>MySQL</code>管理存储空间的基本单位，一个页的大小一般是<code>16KB</code>，记录是被存放在<code>页</code>中的，如果记录占用的空间太大还可能造成<code>行溢出</code>现象，这会导致一条记录被分散存储在多个页中。</p>\n<p><code>页</code>的本质就是一块<code>16KB</code>大小的存储空间，<code>InnoDB</code>为了不同的目的而把<code>页</code>分为不同的类型，其中用于存放记录的页也称为<code>数据页</code>，我们先看看这个用于存放记录的页长什么样。<strong>数据页代表的这块<code>16KB</code>大小的存储空间可以被划分为多个部分，不同部分有不同的功能</strong>，各个部分如图所示：</p>\n<img src=\"/post/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210309131556552.png\" class=\"\" title=\"image-20210309131556552\">\n\n\n\n<h5 id=\"页结构解释\"><a href=\"#页结构解释\" class=\"headerlink\" title=\"页结构解释\"></a>页结构解释</h5><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>中文名</th>\n<th>占用空间</th>\n<th>简单描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>File Header</td>\n<td>文件头部</td>\n<td>38字节</td>\n<td>页的一些通用信息</td>\n</tr>\n<tr>\n<td>Page Header</td>\n<td>页面头部</td>\n<td>56字节</td>\n<td>数据页专有的一些信息</td>\n</tr>\n<tr>\n<td>* <strong>Infimum + Supremum</strong></td>\n<td>最小记录和最大记录</td>\n<td>26字节</td>\n<td>两个虚拟的行记录</td>\n</tr>\n<tr>\n<td>* <strong>User Records</strong></td>\n<td>用户记录</td>\n<td>不确定</td>\n<td>实际存储的行记录内容</td>\n</tr>\n<tr>\n<td>* <strong>Free Space</strong></td>\n<td>空闲空间</td>\n<td>不确定</td>\n<td>页中尚未使用的空间</td>\n</tr>\n<tr>\n<td>* <strong>Page Directory</strong></td>\n<td>页面目录</td>\n<td>不确定</td>\n<td>页中的某些记录的相对位置</td>\n</tr>\n<tr>\n<td>File Trailer</td>\n<td>文件尾部</td>\n<td>8字节</td>\n<td>校验页是否完整</td>\n</tr>\n</tbody></table>\n<p>在页的7个组成部分中，存储的记录会按照指定的<code>行格式</code>存储到 <code>User Records</code> 部分。但是在一开始生成页的时候，其实并没有<code>User Records</code>这个部分，每当插入一条记录，都会从 <code>Free Space</code> 部分，也就是尚未使用的存储空间中申请一个记录大小的空间划分到<code>User Records</code>部分，<strong>当<code>Free Space</code>部分的空间全部被<code>User Records</code>部分替代掉之后，也就意味着这个页使用完了，如果还有新的记录插入的话，就需要去申请新的页了</strong>，这个过程的图示如下：</p>\n<img src=\"/post/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210309132643141.png\" class=\"\" title=\"image-20210309132643141\">\n\n\n\n<ul>\n<li><strong>各个数据页</strong>之间可以组成一个<strong>双向链表</strong> （就是B+树的各个页之间都按照<strong>索引值顺序</strong>用双向链表连接起来）</li>\n<li>而<strong>每个数据页中的记录</strong>又可以组成一个<strong>单向</strong>链表</li>\n<li>每个数据页都会为存储在它里边的记录生成一个<strong>页目录</strong>，该目录页是用<strong>数组</strong>进行管理，在通过<strong>主键</strong>查找某条记录的时候可以在页目录中使用<strong>二分法快速定位</strong>到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录</li>\n<li>以<strong>其他列</strong>(非主键)作为搜索条件：只能从最小记录开始<strong>依次遍历单链表中的每条记录</strong>。</li>\n</ul>\n<h3 id=\"InnoDB的行存储结构\"><a href=\"#InnoDB的行存储结构\" class=\"headerlink\" title=\"InnoDB的行存储结构\"></a>InnoDB的行存储结构</h3><p>一页存放多条行记录，InnoDB支持以下四种行记录格式：</p>\n<ul>\n<li>Compact</li>\n<li>Redundant</li>\n<li>Compressed</li>\n<li>Dynamic (现阶段默认)</li>\n</ul>\n<blockquote>\n<p>因为后续的行记录都是根据Compact来做改变的，所以只介绍Compact格式</p>\n</blockquote>\n<p>行记录格式：</p>\n<img src=\"/post/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210309135239935.png\" class=\"\" title=\"image-20210309135239935\">\n\n<h5 id=\"记录头信息\"><a href=\"#记录头信息\" class=\"headerlink\" title=\"记录头信息\"></a>记录头信息</h5><p>除了变长字段长度列表、NULL值列表之外，还有一个用于描述记录的记录头信息，<strong>它是由固定的5个字节组成</strong>。 5个字节也就是40个二进制位，不同的位代表不同的意思，如下表：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>大小（单位：<strong>bit</strong>）</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>预留位1</td>\n<td>1</td>\n<td>没有使用</td>\n</tr>\n<tr>\n<td>预留位2</td>\n<td>1</td>\n<td>没有使用</td>\n</tr>\n<tr>\n<td>delete_mask</td>\n<td>1</td>\n<td>这个属性标记着当前记录是否被删除，占用1个二进制位，值为<code>0</code>的时候代表记录并没有被删除，为<code>1</code>的时候代表记录被删除掉了。</td>\n</tr>\n<tr>\n<td>min_rec_mask</td>\n<td>1</td>\n<td>B+树的每层非叶子节点中的最小记录都会添加该标记，目的是为了加快检索速度</td>\n</tr>\n<tr>\n<td>n_owned</td>\n<td>4</td>\n<td>表示当前记录拥有的记录数</td>\n</tr>\n<tr>\n<td>heap_no</td>\n<td>13</td>\n<td>表示当前记录在<strong>本页中</strong>的位置信息</td>\n</tr>\n<tr>\n<td>record_type</td>\n<td>3</td>\n<td>当前记录的类型，0表示普通记录，1表示非叶子节点记录，2表示最小记录，3表示最大记录</td>\n</tr>\n<tr>\n<td>next_record</td>\n<td>16</td>\n<td>表示下一条记录的相对位置</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>delete_mask</strong>：这个属性标记着当前记录是否被删除，占用1个二进制位，值为<code>0</code>的时候代表记录并没有被删除，为<code>1</code>的时候代表记录被删除掉了，这些被删除的记录之所以不立即从磁盘上移除，是因为移除它们之后把其他的记录在磁盘上重新排列需要性能消耗，所以只是打个删除标记而已，而且这部分存储空间之后还可以重用，也就是说之后如果有新记录插入到表中的话，可能把这些被删除的记录占用的存储空</li>\n<li>min_rec_mask： B+树的每层非叶子节点中的最小记录都会添加该标记，目的是为了加快检索速度</li>\n<li>heap_no ：<strong>这个属性表示当前记录在本<code>页</code>中的位置</strong>。<code>InnoDB</code>自动给每个页里加了两个记录，由于这两个记录并不是自己插入的，所以有时候也称为<code>伪记录</code>或者<code>虚拟记录</code>。这两个伪记录一个代表<code>最小记录</code>，一个代表<code>最大记录</code>。对于一条完整的记录来说，比较记录的大小就是比较<code>主键</code>的大小。不管我们向<code>页</code>中插入了多少自己的记录，<code>InnoDB</code>都定义的两条伪记录分别为最小记录与最大记录。这两条记录的构造十分简单，都是由5字节大小的<code>记录头信息</code>和8字节大小的一个固定的部分组成的</li>\n</ul>\n<img src=\"/post/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210309140453278.png\" class=\"\" title=\"image-20210309140453278\">\n\n<p>​        <strong>最小记录和最大记录的<code>heap_no</code>值分别是<code>0</code>和<code>1</code>，也就是说它们的位置最靠前</strong></p>\n<ul>\n<li><strong>next_record</strong>：这个非常重要，<strong>它表示从当前记录的真实数据到下一条记录的真实数据的地址偏移量</strong>。比方说第一条记录的<code>next_record</code>值为<code>36</code>，意味着从第一条记录的真实数据的地址处向后找<code>36</code>个字节便是下一条记录的真实数据。这其实是个<code>链表</code>，可以通过一条记录找到它的下一条记录。但是需要注意注意再注意的一点是，<code>下一条记录</code>指得并不是按照插入顺序的下一条记录，而是按照主键值由小到大的顺序的下一条记录。而且<strong>规定 <em>最小记录</em> 的下一条记录就本页中主键值最小的记录，而本页中主键值最大的记录的下一条记录就是 <em>最大记录</em></strong> ，为了更形象的表示一下这个<code>next_record</code>起到的作用，用箭头来替代一下<code>next_record</code>中的地址偏移量：</li>\n</ul>\n<img src=\"/post/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210309141340963.png\" class=\"\" title=\"image-20210309141340963\">\n\n<h5 id=\"记录真实数据\"><a href=\"#记录真实数据\" class=\"headerlink\" title=\"记录真实数据\"></a><strong>记录真实数据</strong></h5><p>记录的真实数据除了我们自己定义的列的数据以外，还会有三个隐藏列：</p>\n<table>\n<thead>\n<tr>\n<th>列名</th>\n<th>是否必须</th>\n<th>占用空间</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>row_id</td>\n<td>否</td>\n<td>6字节</td>\n<td>行ID，唯一标识一条记录</td>\n</tr>\n<tr>\n<td>transaction_id</td>\n<td>是</td>\n<td>6字节</td>\n<td>事务ID</td>\n</tr>\n<tr>\n<td>roll_pointer</td>\n<td>是</td>\n<td>7字节</td>\n<td>回滚指针</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>只有未设置主键时，innodb才会创建row_id来作为主键列</p>\n</blockquote>\n<h5 id=\"页目录\"><a href=\"#页目录\" class=\"headerlink\" title=\"页目录\"></a>页目录</h5><p>InnoDB为记录制作了一个目录，制作过程是这样的：</p>\n<ul>\n<li>将所有正常的记录（包括最大和最小记录，不包括标记为已删除的记录）划分为几个组<ul>\n<li>对于最小记录所在的分组只能有 **1 **条记录，最大记录所在的分组拥有的记录条数只能在 <strong>1~8</strong> 条之间</li>\n<li>剩下的分组中记录的条数范围只能在是 <strong>4~8</strong> 条之间</li>\n<li>初始情况下一个数据页里只有最小记录和最大记录两条记录，它们分属于两个分组。 之后每插入一跳记录都把这条记录放到最大记录所在的组，直到最大记录所在组中的记录数等于8个。 在最大记录所在组中的记录数等于8个的时候再插入一条记录时，将最大记录所在组平均分裂成2个组，然后最大记录所在的组就剩下4条记录了，然后就可以把即将插入的那条记录放到对应的组中</li>\n</ul>\n</li>\n<li><strong>每个组的最后一条记录的头信息中的 n_owned 属性表示该组内共有几条记录</strong></li>\n<li><strong>将每个组的最后一条记录的地址偏移量按顺序存储起来，每个地址偏移量也被称为一个槽</strong>（英文名：Slot）</li>\n</ul>\n<p>这些地址偏移量会被存储到页结构中的 <strong>Page Directory</strong> 中，（可以看前面<a href=\"#%E9%A1%B5%E7%BB%93%E6%9E%84%E8%A7%A3%E9%87%8A\"><strong>页的结构</strong></a> ），比方说现在的表中正常的记录共有6条，InnoDB会把它们分成两组，第一组中只有一个最小记录，第二组中是剩余的5条记录，看下边的示意图：</p>\n<img src=\"/post/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210309144102919.png\" class=\"\" title=\"image-20210309144102919\">\n\n<p>现在<code>Page Directory</code>部分中有两个槽，也就意味着我们的记录被分成了两个组，<code>槽0</code>中的值是<code>99</code>，代表最小记录的地址偏移量；<code>槽1</code>中的值是<code>122</code>，代表最大记录的地址偏移量。 注意最小和最大记录的头信息中的<code>n_owned</code>属性，最小记录的<code>n_owned</code>值为<code>1</code>，这就代表着以最小记录结尾的这个分组中只有<code>1</code>条记录，也就是最小记录本身。 最大记录的<code>n_owned</code>值为<code>5</code>，这就代表着以最大记录结尾的这个分组中只有<code>5</code>条记录，包括最大记录本身还有自己插入的<code>4</code>条记录。</p>\n<h3 id=\"B-树索引\"><a href=\"#B-树索引\" class=\"headerlink\" title=\"B+树索引\"></a>B+树索引</h3><p>InnoDB数据页的主要组成部分。各个数据页可以组成一个双向链表，而每个<strong>数据页</strong>中的记录会按照主键值从小到大的顺序组成一个单向链表，每个数据页都会为存储在它里边儿的记录生成一个<strong>页目录</strong>。再通过主键查找某条记录的时候可以在页目录中使用二分法快速定位到对应的槽。</p>\n<img src=\"/post/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210315132707169.png\" class=\"\" title=\"image-20210315132707169\">\n\n<p><strong>在一个页中的查找</strong></p>\n<ul>\n<li>以主键为搜索条件<br>这个查找过程我们已经很熟悉了，可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。</li>\n<li>以其他列作为搜索条件<br>对非主键列的查找的过程可就不这么幸运了，因为在数据页中并没有对非主键列建立所谓的页目录，所以我们无法通过二分法快速定位相应的槽。这种情况下只能从最小记录开始依次遍历单链表中的每条记录，然后对比每条记录是不是符合搜索条件</li>\n</ul>\n<p><strong>在很多页中查找</strong></p>\n<ol>\n<li>定位到记录所在的页。</li>\n<li>从所在的页内中查找相应的记录。</li>\n</ol>\n<p>在没有索引的情况下，不论是根据主键列或者其他列的值进行查找，由于我们并不能快速的定位到记录所在的页，所以只能从第一个页沿着双向链表一直往下找，在每一个页中根据我们刚刚唠叨过的查找方式去查找指定的记录</p>\n<p><strong>索引</strong></p>\n<p>为了我们理解上的方便，我们简化了一下index_demo表的行格式示意图</p>\n<img src=\"/post/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210315133023585.png\" class=\"\" title=\"image-20210315133023585\">\n\n\n\n<p><strong>record_type</strong><br>这个属性表示当前记录的类型，一共有4种类型的记录，0表示普通记录，1表示B+树非叶节点记录，2表示最小记录，3表示最大记录。<br><strong>next_record</strong><br>记录头信息的一项属性，表示下一条地址相对于本条记录的地址偏移量</p>\n<p>把一些记录放到页里边的示意图就是：</p>\n<img src=\"/post/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210315133136581.png\" class=\"\" title=\"image-20210315133136581\">\n\n<p>由于数据页的编号可能并不是连续的，所以在向表中插入许多条记录后，可能是这样的效果：</p>\n<img src=\"/post/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/2d3f897b76d42e02a0c371beef9348e21603800405473.png\" class=\"\" title=\"2d3f897b76d42e02a0c371beef9348e21603800405473\">\n\n\n\n<p>因为这些16KB的页在物理存储上可能并不挨着，所以如果想从这么多页中根据主键值快速定位某些记录所在的页，我们需要给它们做个目录，每个页对应一个目录项，每个目录项包括下边两个部分：<br>    * 页的记录中<strong>最小的主键值</strong>，我们用key来表示。<br>    * 页号，我们用page_no表示。</p>\n<p>在InnoDB中复用了之前存储用户记录的数据页来存储目录项，为了和用户记录做一下区分，我们把这些用来表示目录项的记录称为目录项记录</p>\n<img src=\"/post/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210315134405397.png\" class=\"\" title=\"image-20210315134405397\">\n\n<p>如果我们表中的数据非常多则会产生很多存储目录项记录的页，那我们怎么根据主键值快速定位一个存储目录项记录的页呢？其实也简单，为这些存储目录项记录的页再生成一个更高级的目录，就像是一个多级目录一样，大目录里嵌套小目录，小目录里才是实际的数据，所以现在各个页的示意图就是这样子：</p>\n<img src=\"/post/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210315135330807.png\" class=\"\" title=\"image-20210315135330807\">\n\n<p>所以随着目录的增加，目录的层级就继续增加：</p>\n<img src=\"/post/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210315135553476.png\" class=\"\" title=\"image-20210315135553476\">\n\n<p><strong>聚簇索引</strong></p>\n<p>我们上边介绍的B+树本身就是一个目录，或者说本身就是一个索引。它有两个特点：</p>\n<ol>\n<li>使用记录主键值的大小进行记录和页的排序</li>\n<li>B+树的叶子节点存储的是完整的用户记录。</li>\n</ol>\n<p>我们把具有这两种特性的B+树称为聚簇索引，所有完整的用户记录都存放在这个聚簇索引的叶子节点处。这种聚簇索引并不需要我们在MySQL语句中显式的使用INDEX语句去创建MySQL中事务的创建</p>\n<p><strong>二级索引</strong></p>\n<img src=\"/post/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210315140743239.png\" class=\"\" title=\"image-20210315140743239\">\n\n<p>这个B+树与上边介绍的聚簇索引有几处不同：</p>\n<ul>\n<li>使用记录c2列的大小进行记录和页的排序，这包括三个方面的含义：</li>\n<li><ul>\n<li>页内的记录是按照c2列的大小顺序排成一个单向链表。</li>\n<li>各个存放用户记录的页也是根据页中记录的c2列大小顺序排成一个双向链表。</li>\n<li>存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的c2列大小顺序排成一个双向链表。</li>\n</ul>\n</li>\n<li>B+树的叶子节点存储的并不是完整的用户记录，而只是c2列+主键这两个列的值。</li>\n<li>目录项记录中不再是主键+页号的搭配，而变成了c2列+页号的搭配。</li>\n</ul>\n<p><strong>联合索引</strong></p>\n<img src=\"/post/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210315141037244.png\" class=\"\" title=\"image-20210315141037244\">\n\n<p>如图所示，我们需要注意一下几点：</p>\n<ul>\n<li>每条目录项记录都由c2、c3、页号这三个部分组成，各条记录先按照c2列的值进行排序，如果记录的c2列相同，则按照c3列的值进行排序。</li>\n<li>B+树叶子节点处的用户记录由c2、c3和主键c1列组成。</li>\n</ul>\n<p><strong>B+树适用的条件</strong></p>\n<p>那么再次建议回过头把前边的内容看完了再来，要不然读文章对你来说是一种折磨。首先，B+树索引并不是万能的，并不是所有的查询语句都能用到我们建立的索引。下边介绍几个我们可能使用B+树索引来进行查询的情况。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CopyCREATE TABLE person_info(\n    id INT NOT NULL auto_increment,\n    name VARCHAR(100) NOT NULL,\n    birthday DATE NOT NULL,\n    phone_number CHAR(11) NOT NULL,\n    country varchar(100) NOT NULL,\n    PRIMARY KEY (id),\n    KEY idx_name_birthday_phone_number (name, birthday, phone_number)\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>person_info表会为聚簇索引和idx_name_birthday_phone_number索引建立2棵B+树。</p>\n<p>在记录结构中只保留name、birthday、phone_number、id这四个列的真实数据值，所以示意图就长这样：</p>\n<img src=\"/post/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210315143231164.png\" class=\"\" title=\"MySQL中InnoDB及索引深入剖析35\">\n\n<p>内节点中存储的是目录项记录，叶子节点中存储的是用户记录（由于不是聚簇索引，所以用户记录是不完整的，缺少country列的值）。</p>\n<ul>\n<li>先按照name列的值进行排序。</li>\n<li>如果name列的值相同，则按照birthday列的值进行排序。</li>\n<li>如果birthday列的值也相同，则按照phone_number的值进行排序。</li>\n</ul>\n<h4 id=\"全值匹配\"><a href=\"#全值匹配\" class=\"headerlink\" title=\"全值匹配\"></a>全值匹配</h4><p>如果我们的搜索条件中的列和索引列一致的话，这种情况就称为全值匹配，比方说下边这个查找语句：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CopySELECT * FROM person_info WHERE name &#x3D; &#39;Ashburn&#39; AND birthday &#x3D; &#39;1990-09-27&#39; AND phone_number &#x3D; &#39;15123983239&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>因为B+树的数据页和记录先是按照name列的值进行排序的，所以先可以很快定位name列的值是Ashburn的记录位置。</li>\n<li>在name列相同的记录里又是按照birthday列的值进行排序的，所以在name列的值是Ashburn的记录里又可以快速定位birthday列的值是’1990-09-27’的记录。</li>\n<li>如果很不幸，name和birthday列的值都是相同的，那记录是按照phone_number列的值排序的，所以联合索引中的三个列都可能被用到。</li>\n</ul>\n<p>调换name、birthday、phone_number这几个搜索列的顺序对查询的执行过程是没有影响的。</p>\n<h4 id=\"匹配左边的列\"><a href=\"#匹配左边的列\" class=\"headerlink\" title=\"匹配左边的列\"></a>匹配左边的列</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">CopySELECT * FROM person_info WHERE name &#x3D; &#39;Ashburn&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者包含多个左边的列也行：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CopySELECT * FROM person_info WHERE name &#x3D; &#39;Ashburn&#39; AND birthday &#x3D; &#39;1990-09-27&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>只有左边的列才能匹配，下边的语句就用不到这个B+树索引：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CopySELECT * FROM person_info WHERE birthday &#x3D; &#39;1990-09-27&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>因为B+树的数据页和记录先是按照name列的值排序的，在name列的值相同的情况下才使用birthday列进行排序，也就是说name列的值不同的记录中birthday的值可能是无序的。</p>\n<p>如果我们想使用联合索引中尽可能多的列，搜索条件中的各个列必须是联合索引中从最左边连续的列。</p>\n<h4 id=\"匹配列前缀\"><a href=\"#匹配列前缀\" class=\"headerlink\" title=\"匹配列前缀\"></a>匹配列前缀</h4><p>person_info表上建立的联合索引idx_name_birthday_phone_number会先用name列的值进行排序。</p>\n<p>也就是说这些字符串的前n个字符，也就是前缀都是排好序的，所以对于字符串类型的索引列来说，我们只匹配它的前缀也是可以快速定位记录的，比方说我们想查询名字以’As’开头的记录，那就可以这么写查询语句：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CopySELECT * FROM person_info WHERE name LIKE &#39;As%&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>同理，这样也是无法匹配的：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CopySELECT * FROM person_info WHERE name LIKE &#39;%As%&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"匹配范围值\"><a href=\"#匹配范围值\" class=\"headerlink\" title=\"匹配范围值\"></a>匹配范围值</h4><p>所有记录都是按照索引列的值从小到大的顺序排好序的，所以这极大的方便我们查找索引列的值在某个范围内的记录。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CopySELECT * FROM person_info WHERE name &gt; &#39;Asa&#39; AND name &lt; &#39;Barlow&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>由于所有记录都是由链表连起来的（记录之间用单链表，数据页之间用双链表），所以他们之间的记录都可以很容易的取出来喽～<br>找到这些记录的主键值，再到聚簇索引中回表查找完整的记录。</p>\n<p>如果对多个列同时进行范围查找的话，只有对索引最左边的那个列进行范围查找的时候才能用到B+树索引，比方说这样：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CopySELECT * FROM person_info WHERE name &gt; ‘Asa’ AND name &lt; ‘Barlow’\nAND birthday &gt; &#39;1980-01-01&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上边这个查询可以分成两个部分：</p>\n<ol>\n<li>通过条件name &gt; ‘Asa’ AND name &lt; ‘Barlow’来对name进行范围。</li>\n<li>对这些name值不同的记录继续通过birthday &gt; ‘1980-01-01’条件继续过滤。</li>\n</ol>\n<p>对于联合索引idx_name_birthday_phone_number来说，只能用到name列的部分，而用不到birthday列的部分，<strong>因为只有name值相同的情况下才能用birthday列的值进行排序，而这个查询中通过name进行范围查找的记录中可能并不是按照birthday列进行排序的</strong>，所以在搜索条件中继续以birthday列进行查找时是用不到这个B+树索引的。</p>\n<h4 id=\"精确匹配某一列并范围匹配另外一列\"><a href=\"#精确匹配某一列并范围匹配另外一列\" class=\"headerlink\" title=\"精确匹配某一列并范围匹配另外一列\"></a>精确匹配某一列并范围匹配另外一列</h4><p>虽然对多个列都进行范围查找时只能用到最左边那个索引列，但是如果左边的列是精确查找，则右边的列可以进行范围查找，比方说这样：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CopySELECT * FROM person_info WHERE name &#x3D; &#39;Ashburn&#39; AND birthday &gt; &#39;1980-01-01&#39; AND birthday &lt; &#39;2000-12-31&#39; AND phone_number &gt; &#39;15100000000&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>由于name列是精确查找，所以通过name = ‘Ashburn’条件查找后得到的结果的name值都是相同的，它们会再按照birthday的值进行排序。所以此时对birthday列进行范围查找是可以用到B+树索引的。</p>\n<p>phone_number &gt; ‘15100000000’，通过birthday的范围查找的记录的birthday的值可能不同，所以这个条件无法再利用B+树索引了，只能遍历上一步查询得到的记录。</p>\n<h4 id=\"用于排序\"><a href=\"#用于排序\" class=\"headerlink\" title=\"用于排序\"></a>用于排序</h4><p>有的时候可能查询的结果集太大以至于不能在内存中进行排序的话，还可能暂时借助磁盘的空间来存放中间结果，排序操作完成后再把排好序的结果集返回到客户端。在MySQL中，把这种在内存中或者磁盘上进行排序的方式统称为文件排序（英文名：filesort）。</p>\n<p>但是如果ORDER BY子句里使用到了我们的索引列，就有可能省去在内存或文件中排序的步骤，比如下边这个简单的查询语句：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CopySELECT * FROM person_info ORDER BY name, birthday, phone_number LIMIT 10;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>因为这个B+树索引本身就是按照上述规则排好序的，所以直接从索引中提取数据，然后进行回表操作取出该索引中不包含的列就好了。</p>\n<p><strong>使用联合索引进行排序注意事项</strong><br>ORDER BY的子句后边的列的顺序也必须按照索引列的顺序给出，如果给出ORDER BY phone_number, birthday, name的顺序，那也是用不了B+树索引。</p>\n<h4 id=\"不可以使用索引进行排序的几种情况\"><a href=\"#不可以使用索引进行排序的几种情况\" class=\"headerlink\" title=\"不可以使用索引进行排序的几种情况\"></a>不可以使用索引进行排序的几种情况</h4><p>1.ASC、DESC混用<br>对于使用联合索引进行排序的场景，我们要求各个排序列的排序顺序是一致的，也就是要么各个列都是ASC规则排序，要么都是DESC规则排序。</p>\n<p>idx_name_birthday_phone_number联合索引中记录的结构：</p>\n<ul>\n<li>先按照记录的name列的值进行升序排列。</li>\n<li>如果记录的name列的值相同，再按照birthday列的值进行升序排列。</li>\n<li>如果记录的birthday列的值相同，再按照phone_number列的值进行升序排列。</li>\n</ul>\n<p>2.WHERE子句中出现非排序使用到的索引列<br>如果WHERE子句中出现了非排序使用到的索引列，那么排序依然是使用不到索引的，比方说这样：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CopySELECT * FROM person_info WHERE country &#x3D; ‘China’ ORDER BY name LIMIT 10;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个查询只能先把符合搜索条件country = ‘China’的记录提取出来后再进行排序，是使用不到索引。</p>\n<p>3.排序列包含非同一个索引的列<br>有时候用来排序的多个列不是一个索引里的，这种情况也不能使用索引进行排序，比方说：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CopySELECT * FROM person_info ORDER BY name, country LIMIT 10;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>4.排序列使用了复杂的表达式<br>要想使用索引进行排序操作，必须保证索引列是以单独列的形式出现，而不是修饰过的形式，比方说这样：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CopySELECT * FROM person_info ORDER BY UPPER(name) LIMIT 10;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"回表的代价\"><a href=\"#回表的代价\" class=\"headerlink\" title=\"回表的代价\"></a>回表的代价</h2><p>还是用idx_name_birthday_phone_number索引为例，看下边这个查询：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CopySELECT * FROM person_info WHERE name &gt; &#39;Asa&#39; AND name &lt; &#39;Barlow&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在使用idx_name_birthday_phone_number索引进行查询时大致可以分为这两个步骤：</p>\n<ol>\n<li>从索引idx_name_birthday_phone_number对应的B+树中取出name值在Asa～Barlow之间的用户记录。</li>\n<li>由于索引idx_name_birthday_phone_number对应的B+树用户记录中只包含name、birthday、phone_number、id这4个字段，而查询列表是*，意味着要查询表中所有字段，也就是还要包括country字段。这时需要把从上一步中获取到的每一条记录的id字段都到聚簇索引对应的B+树中找到完整的用户记录，也就是我们通常所说的回表，然后把完整的用户记录返回给查询用户。</li>\n</ol>\n<p>读取索引idx_name_birthday_phone_number数据中，在Asa～Barlow之间的记录在磁盘中的存储是相连的，集中分布在一个或几个数据页中，我们可以很快的把这些连着的记录从磁盘中读出来，这种读取方式我们也可以称为<strong>顺序I/O</strong>。</p>\n<p>而获取到的记录的id字段的值可能并不相连，而在聚簇索引中记录是根据id（也就是主键）的顺序排列的，所以根据这些并不连续的id值到聚簇索引中访问完整的用户记录可能分布在不同的数据页中，这样读取完整的用户记录可能要访问更多的数据页，这种读取方式我们也可以称为<strong>随机I/O</strong>。</p>\n<p>所以这个使用索引idx_name_birthday_phone_number的查询有这么两个特点：</p>\n<ul>\n<li>会使用到两个B+树索引，一个二级索引，一个聚簇索引。</li>\n<li>访问二级索引使用顺序I/O，访问聚簇索引使用随机I/O。</li>\n</ul>\n<p>需要回表的记录越多，使用二级索引的性能就越低，甚至让某些查询宁愿使用全表扫描也不使用二级索引。比方说name值在Asa～Barlow之间的用户记录数量占全部记录数量90%以上，那么如果使用idx_name_birthday_phone_number索引的话，有90%多的id值需要回表，这不是吃力不讨好么，还不如直接去扫描聚簇索引（也就是全表扫描）。</p>\n<p>查询优化器做的工作，查询优化器会事先对表中的记录计算一些统计数据，然后再利用这些统计数据根据查询的条件来计算一下需要回表的记录数，需要回表的记录数越多，就越倾向于使用全表扫描，反之倾向于使用二级索引 + 回表的方式。</p>\n<p>比方说上边的查询可以改写成这样：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CopySELECT * FROM person_info WHERE name &gt; &#39;Asa&#39; AND name &lt; &#39;Barlow&#39; LIMIT 10;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加了LIMIT 10的查询更容易让优化器采用二级索引 + 回表的方式进行查询。</p>\n<h3 id=\"覆盖索引\"><a href=\"#覆盖索引\" class=\"headerlink\" title=\"覆盖索引\"></a>覆盖索引</h3><p>为了彻底告别回表操作带来的性能损耗，我们建议：最好在查询列表里只包含索引列。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CopySELECT name, birthday, phone_number FROM person_info WHERE name &gt; &#39;Asa&#39; AND name &lt; &#39;Barlow&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>因为我们只查询name, birthday, phone_number这三个索引列的值，所以在通过idx_name_birthday_phone_number索引得到结果后就不必到聚簇索引中再查找记录的剩余列，也就是country列的值了，这样就省去了回表操作带来的性能损耗。</p>\n<p>我们把这种只需要用到索引的查询方式称为索引覆盖。</p>\n<p>我们很不鼓励用*号作为查询列表，最好把我们需要查询的列依次标明。</p>\n<h3 id=\"索引失效的情况\"><a href=\"#索引失效的情况\" class=\"headerlink\" title=\"索引失效的情况\"></a>索引失效的情况</h3><img src=\"/post/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/3602225017-48d7f65c7b440c51.png\" class=\"\" title=\"3602225017-48d7f65c7b440c51\">\n\n<p><a href=\"https://segmentfault.com/a/1190000021464570?utm_source=sf-similar-article\">具体情况参考网站</a></p>\n<h2 id=\"如何挑选索引\"><a href=\"#如何挑选索引\" class=\"headerlink\" title=\"如何挑选索引\"></a>如何挑选索引</h2><h3 id=\"只为用于搜索、排序或分组的列创建索引\"><a href=\"#只为用于搜索、排序或分组的列创建索引\" class=\"headerlink\" title=\"只为用于搜索、排序或分组的列创建索引\"></a>只为用于搜索、排序或分组的列创建索引</h3><p>也就是说，只为出现在WHERE子句中的列、连接子句中的连接列，或者出现在ORDER BY或GROUP BY子句中的列创建索引。而出现在查询列表中的列就没必要建立索引了</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CopySELECT birthday, country FROM person_name WHERE name &#x3D; &#39;Ashburn&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"考虑列的基数\"><a href=\"#考虑列的基数\" class=\"headerlink\" title=\"考虑列的基数\"></a>考虑列的基数</h3><p>记录行数一定的情况下，列的基数越大，该列中的值越分散，列的基数越小，该列中的值越集中。</p>\n<p>假设某个列的基数为1，也就是所有记录在该列中的值都一样，那为该列建立索引是没有用的，因为所有值都一样就无法排序，无法进行快速查找了。</p>\n<p>而且如果某个建立了二级索引的列的重复值特别多，那么使用这个二级索引查出的记录还可能要做回表操作，这样性能损耗就更大了。</p>\n<h3 id=\"索引列的类型尽量小\"><a href=\"#索引列的类型尽量小\" class=\"headerlink\" title=\"索引列的类型尽量小\"></a>索引列的类型尽量小</h3><p>如果我们想要对某个整数列建立索引的话，在表示的整数范围允许的情况下，尽量让索引列使用较小的类型。<br>因为：</p>\n<ul>\n<li>数据类型越小，在查询时进行的比较操作越快（这是CPU层次的东东）</li>\n<li>数据类型越小，索引占用的存储空间就越少，在一个数据页内就可以放下更多的记录，从而减少磁盘I/O带来的性能损耗，也就意味着可以把更多的数据页缓存在内存中，从而加快读写效率。</li>\n</ul>\n<p>因为不仅是聚簇索引中会存储主键值，其他所有的二级索引的节点处都会存储一份记录的主键值，如果主键适用更小的数据类型，也就意味着节省更多的存储空间和更高效的I/O。</p>\n<h3 id=\"让索引列在比较表达式中单独出现\"><a href=\"#让索引列在比较表达式中单独出现\" class=\"headerlink\" title=\"让索引列在比较表达式中单独出现\"></a>让索引列在比较表达式中单独出现</h3><p>如：</p>\n<ol>\n<li>WHERE my_col * 2 &lt; 4</li>\n<li>WHERE my_col &lt; 4/2</li>\n</ol>\n<p>第1个WHERE子句中my_col列并不是以单独列的形式出现的，而是以my_col * 2这样的表达式的形式出现的，存储引擎会依次遍历所有的记录，计算这个表达式的值是不是小于4。</p>\n<p>如果索引列在比较表达式中不是以单独列的形式出现，而是以某个表达式，或者函数调用形式出现的话，是用不到索引的。</p>\n<h3 id=\"主键插入顺序\"><a href=\"#主键插入顺序\" class=\"headerlink\" title=\"主键插入顺序\"></a>主键插入顺序</h3><p>对于一个使用InnoDB存储引擎的表来说，在我们没有显式的创建索引时，表中的数据实际上都是存储在聚簇索引的叶子节点的。而记录又是存储在数据页中的，数据页和记录又是按照记录主键值从小到大的顺序进行排序，所以如果我们插入的记录的主键值是依次增大的话，那我们每插满一个数据页就换到下一个数据页继续插。</p>\n<p>如果我们插入的主键值忽大忽小的话，就会需要页分裂和记录移位，意味着：性能损耗！所以如果我们想尽量避免这样无谓的性能损耗，最好让插入的记录的主键值依次递增，这样就不会发生这样的性能损耗了。</p>\n<p>所以我们建议：让主键具有AUTO_INCREMENT，让存储引擎自己为表生成主键，而不是我们手动插入。</p>\n","feature":null,"text":"InnoDB 页结构页是MySQL管理存储空间的基本单位，一个页的大小一般是16KB，记录是被存放在页中的，如果记录占用的空间太大还可能造成行溢出现象，这会导致一条记录被分散存储在多个页中。 页的本质就是一块16KB大小的存储空间，InnoDB为了不同的目的而把页分为不同的类型，...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"底层原理","slug":"底层原理","count":4,"path":"api/tags/底层原理.json"},{"name":"MySQL","slug":"MySQL","count":1,"path":"api/tags/MySQL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#InnoDB-%E9%A1%B5%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">InnoDB 页结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%A1%B5%E7%BB%93%E6%9E%84%E8%A7%A3%E9%87%8A\"><span class=\"toc-text\">页结构解释</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#InnoDB%E7%9A%84%E8%A1%8C%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">InnoDB的行存储结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%AE%B0%E5%BD%95%E5%A4%B4%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">记录头信息</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%AE%B0%E5%BD%95%E7%9C%9F%E5%AE%9E%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">记录真实数据</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%A1%B5%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">页目录</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#B-%E6%A0%91%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">B+树索引</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%80%BC%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">全值匹配</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E5%B7%A6%E8%BE%B9%E7%9A%84%E5%88%97\"><span class=\"toc-text\">匹配左边的列</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E5%88%97%E5%89%8D%E7%BC%80\"><span class=\"toc-text\">匹配列前缀</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E8%8C%83%E5%9B%B4%E5%80%BC\"><span class=\"toc-text\">匹配范围值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B2%BE%E7%A1%AE%E5%8C%B9%E9%85%8D%E6%9F%90%E4%B8%80%E5%88%97%E5%B9%B6%E8%8C%83%E5%9B%B4%E5%8C%B9%E9%85%8D%E5%8F%A6%E5%A4%96%E4%B8%80%E5%88%97\"><span class=\"toc-text\">精确匹配某一列并范围匹配另外一列</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%A8%E4%BA%8E%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">用于排序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5\"><span class=\"toc-text\">不可以使用索引进行排序的几种情况</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E8%A1%A8%E7%9A%84%E4%BB%A3%E4%BB%B7\"><span class=\"toc-text\">回表的代价</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">覆盖索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E7%9A%84%E6%83%85%E5%86%B5\"><span class=\"toc-text\">索引失效的情况</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E6%8C%91%E9%80%89%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">如何挑选索引</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AA%E4%B8%BA%E7%94%A8%E4%BA%8E%E6%90%9C%E7%B4%A2%E3%80%81%E6%8E%92%E5%BA%8F%E6%88%96%E5%88%86%E7%BB%84%E7%9A%84%E5%88%97%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">只为用于搜索、排序或分组的列创建索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%80%83%E8%99%91%E5%88%97%E7%9A%84%E5%9F%BA%E6%95%B0\"><span class=\"toc-text\">考虑列的基数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95%E5%88%97%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%B0%BD%E9%87%8F%E5%B0%8F\"><span class=\"toc-text\">索引列的类型尽量小</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A9%E7%B4%A2%E5%BC%95%E5%88%97%E5%9C%A8%E6%AF%94%E8%BE%83%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E5%8D%95%E7%8B%AC%E5%87%BA%E7%8E%B0\"><span class=\"toc-text\">让索引列在比较表达式中单独出现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E9%94%AE%E6%8F%92%E5%85%A5%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">主键插入顺序</span></a></li></ol>","author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"不同中间件的高并发架构","uid":"1b5a7d45e32f32d8b53151bc92581ac8","slug":"不同中间件的高并发架构","date":"2021-05-03T21:13:48.000Z","updated":"2022-09-15T14:22:17.560Z","comments":true,"path":"api/articles/不同中间件的高并发架构.json","keywords":null,"cover":[],"text":"不同中间件的高并发MySQL的高并发对于高并发阶段，MySQL 要做的就是基于主从复制架构，进行读写分离 MySQL主从复制的原理主库将变更写入 binlog 日志，然后从库连接到主库之后，从库有一个 IO 线程，将主库的 binlog 日志拷贝到自己本地，写入一个 relay ...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"系统设计","slug":"系统设计","count":2,"path":"api/tags/系统设计.json"},{"name":"高并发","slug":"高并发","count":1,"path":"api/tags/高并发.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"RabbitMQ整合SpringBoot","uid":"9fff64f3cbe68428f83c74019add044a","slug":"RabbitMQ整合SpringBoot","date":"2021-05-03T21:03:59.000Z","updated":"2022-09-15T14:22:17.532Z","comments":true,"path":"api/articles/RabbitMQ整合SpringBoot.json","keywords":null,"cover":[],"text":"RabbitMQ的使用 在 Rabbitmq 的模型中，Server 中会包含很多个虚拟主机 Virtual Host ，这就类似于数据库中的库，用来和项目做一一的映射，不同的项目建立不同的主机，达到隔离每个项目的目的。 所以在创建项目前先创建一个主机 在 RabbitMQ 中创...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"中间件","slug":"中间件","count":5,"path":"api/tags/中间件.json"},{"name":"使用心得","slug":"使用心得","count":2,"path":"api/tags/使用心得.json"},{"name":"RabbitMQ","slug":"RabbitMQ","count":1,"path":"api/tags/RabbitMQ.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}