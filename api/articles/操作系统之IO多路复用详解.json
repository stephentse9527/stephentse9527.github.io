{"title":"操作系统之IO多路复用详解","uid":"6cd30b54600ff936f0e357293094df28","slug":"操作系统之IO多路复用详解","date":"2021-05-03T20:44:59.000Z","updated":"2022-09-15T14:22:17.560Z","comments":true,"path":"api/articles/操作系统之IO多路复用详解.json","keywords":null,"cover":null,"content":"<h3 id=\"用户空间与内核空间\"><a href=\"#用户空间与内核空间\" class=\"headerlink\" title=\"用户空间与内核空间\"></a>用户空间与内核空间</h3><p>操作系统为了保证内核安全，将内存空间分为两部分：用户空间和内核空间，用户的程序都运行在用户空间上，而对于管理系统的进程，内存，设备，文件等操作，都只能由运行在内核空间的核心进程来进行</p>\n<h3 id=\"文件描述符fd\"><a href=\"#文件描述符fd\" class=\"headerlink\" title=\"文件描述符fd\"></a>文件描述符fd</h3><p>文件描述符（File descriptor）是一个用于表述指向文件的引用的抽象化概念。</p>\n<p>文件描述符在形式上是一个<strong>非负整数</strong>。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统</p>\n<h3 id=\"缓存-I-O\"><a href=\"#缓存-I-O\" class=\"headerlink\" title=\"缓存 I/O\"></a>缓存 I/O</h3><p>缓存 I/O 又被称作标准 I/O，大多数文件系统的默认 I/O 操作都是缓存 I/O。在 Linux 的缓存 I/O 机制中，操作系统会将 I/O 的数据缓存在文件系统的页缓存（ page cache ）中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。</p>\n<p><strong>缓存 I/O 的缺点：</strong><br>数据在传输过程中需要在应用程序地址空间和内核进行多次数据拷贝操作，这些数据拷贝操作所带来的 CPU 以及内存开销是非常大的。</p>\n<h3 id=\"从阻塞-I-O-到-I-O-多路复用\"><a href=\"#从阻塞-I-O-到-I-O-多路复用\" class=\"headerlink\" title=\"从阻塞 I/O 到 I/O 多路复用\"></a>从阻塞 I/O 到 I/O 多路复用</h3><p>阻塞 I/O，是指进程发起调用后，会被挂起（阻塞），直到收到数据再返回。如果调用一直不返回，进程就会一直被挂起。因此，当使用阻塞 I/O 时，需要使用<strong>多线程</strong>来处理多个文件描述符。</p>\n<p>多线程切换有一定的开销，因此引入非阻塞 I/O。非阻塞 I/O 不会将进程挂起，调用时会立即返回成功或错误，因此可以在<strong>一个线程</strong>里<em>轮询</em>多个文件描述符是否就绪。</p>\n<p>但是非阻塞 I/O 的缺点是：每次发起系统调用，只能检查<strong>一个</strong>文件描述符是否就绪。当文件描述符很多时，系统调用的成本很高。</p>\n<p>因此引入了 I/O 多路复用，可以<strong>通过一次系统调用，检查多个文件描述符的状态</strong>。这是 I/O 多路复用的主要优点，相比于非阻塞 I/O，在文件描述符较多的场景下，避免了频繁的用户态和内核态的切换，减少了系统调用的开销。</p>\n<blockquote>\n<p>I/O 多路复用相当于将「遍历所有文件描述符、通过非阻塞 I/O 查看其是否就绪」的过程从用户线程移到了内核中，由内核来负责轮询</p>\n</blockquote>\n<h3 id=\"I-O-多路复用之select、poll、epoll详解\"><a href=\"#I-O-多路复用之select、poll、epoll详解\" class=\"headerlink\" title=\"I/O 多路复用之select、poll、epoll详解\"></a>I/O 多路复用之select、poll、epoll详解</h3><h4 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h4><p>select函数将监视的文件描述符分为三类：readfds，writefds，errorfds，采用位图的形式，对于未就绪的文件描述符，使用0表示，而就绪则采用1表示。</p>\n<p>调用select后，会顺序遍历文件描述符列表检查每个文件描述符是否就绪，如果每个文件描述符都未就绪，那么select就会阻塞timeout时长，再返回，这期间如果某个文件描述符发生可读事件，则select会将对应位置为1，并立即返回</p>\n<p>select的缺点：</p>\n<ul>\n<li>性能开销大：需要遍历传递进来的每个文件描述符，不管他们是否就绪</li>\n<li>同时能够监听的文件描述符数量太少，受限于fd_set的大小</li>\n</ul>\n<h4 id=\"poll\"><a href=\"#poll\" class=\"headerlink\" title=\"poll\"></a>poll</h4><p>poll和select的区别是：poll是采用链表的方式来存储文件描述符，没有最大的存储数量的限制</p>\n<h4 id=\"epoll\"><a href=\"#epoll\" class=\"headerlink\" title=\"epoll\"></a>epoll</h4><p>epoll是对select和poll的改进，避免了性能开销过大，和文件描述符数量少的两个缺点</p>\n<p>epoll有以下三个特点：</p>\n<ul>\n<li>使用红黑树存储文件描述符集合</li>\n<li>使用队列存储就绪的文件描述符</li>\n<li>每个文件描述符只需要在添加时传入一次，通过事件更改文件描述符状态</li>\n</ul>\n<p>epoll使用三个函数来进行操作，分别是 <code>epoll_create</code>，<code>epoll_ctl </code> 和 <code>epoll_wait</code></p>\n<h5 id=\"epoll-create\"><a href=\"#epoll-create\" class=\"headerlink\" title=\"epoll_create\"></a>epoll_create</h5><p><code>epoll_create</code> 会创建一个 <code>epoll</code> 实例，同时返回一个引用该实例的文件描述符。</p>\n<p>返回的文件描述符仅仅指向对应的 <code>epoll</code> 实例，并不表示真实的磁盘文件节点。其他 API 如 <code>epoll_ctl</code>、<code>epoll_wait</code> 会使用这个文件描述符来操作相应的 <code>epoll</code> 实例。</p>\n<p>当创建好 epoll 句柄后，它会占用一个 fd 值，在 linux 下查看 <code>/proc/进程id/fd/</code>，就能够看到这个 fd。所以在使用完 epoll 后，必须调用 <code>close(epfd)</code> 关闭对应的文件描述符，否则可能导致 fd 被耗尽。当指向同一个 <code>epoll</code> 实例的所有文件描述符都被关闭后，操作系统会销毁这个 <code>epoll</code> 实例</p>\n<p><code>epoll</code> 实例内部存储：</p>\n<ul>\n<li>监听列表：所有要监听的文件描述符，使用红黑树</li>\n<li>就绪列表：所有就绪的文件描述符，使用链表</li>\n</ul>\n<h5 id=\"epoll-ctl\"><a href=\"#epoll-ctl\" class=\"headerlink\" title=\"epoll_ctl\"></a>epoll_ctl</h5><p><code>epoll_ctl</code> 会将文件描述符 <code>fd</code> 添加到 <code>epoll</code> 实例的监听列表里，同时为 <code>fd</code> 设置一个回调函数，并监听事件 <code>event</code>。当 <code>fd</code> 上发生相应事件时，会调用回调函数，将 <code>fd</code> 添加到 <code>epoll</code> 实例的就绪队列上</p>\n<h5 id=\"epoll-wait\"><a href=\"#epoll-wait\" class=\"headerlink\" title=\"epoll_wait\"></a>epoll_wait</h5><p>这是 epoll 模型的主要函数，功能相当于 <code>select</code></p>\n<p>如果没有文件描述符就绪，即就绪队列为空，则epoll_wait会阻塞timeout秒，直到有文件描述符就绪，如果timeout为0，则立即返回</p>\n<h5 id=\"epoll的优点-面试可能会问\"><a href=\"#epoll的优点-面试可能会问\" class=\"headerlink\" title=\"epoll的优点(面试可能会问)\"></a>epoll的优点(面试可能会问)</h5><ul>\n<li>避免了性能开销大：epoll_ctl中为每个文件描述符指定了回调函数，并在就绪时将器加入到就绪队列当中，使用不需要遍历每个文件描述符，只需要判断就绪队列列表是否为空即可，这样在没有描述符就绪时，epoll能更早的让出系统资源</li>\n<li>而低于文件描述符少，select采用位图存储文件描述符，而epoll使用红黑树存储，数量较大</li>\n</ul>\n<h3 id=\"三者对比\"><a href=\"#三者对比\" class=\"headerlink\" title=\"三者对比\"></a>三者对比</h3><ul>\n<li><code>select</code>：调用开销大（需要复制集合）；集合大小有限制；需要遍历整个集合找到就绪的描述符</li>\n<li><code>poll</code>：poll 采用链表的方式存储文件描述符，没有最大存储数量的限制，其他方面和 select 没有区别</li>\n<li><code>epoll</code>：调用开销小（不需要复制）；集合大小无限制；采用回调机制，不需要遍历整个集合</li>\n</ul>\n<p><code>select</code>、<code>poll</code> 都是在用户态维护文件描述符集合，因此每次需要将完整集合传给内核；<code>epoll</code> 由操作系统在内核中维护文件描述符集合，因此只需要在创建的时候传入文件描述符</p>\n","feature":null,"text":"用户空间与内核空间操作系统为了保证内核安全，将内存空间分为两部分：用户空间和内核空间，用户的程序都运行在用户空间上，而对于管理系统的进程，内存，设备，文件等操作，都只能由运行在内核空间的核心进程来进行 文件描述符fd文件描述符（File descriptor）是一个用于表述指向文...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"计算机基础","slug":"计算机基础","count":4,"path":"api/tags/计算机基础.json"},{"name":"操作系统","slug":"操作系统","count":3,"path":"api/tags/操作系统.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%E4%B8%8E%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">用户空间与内核空间</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6fd\"><span class=\"toc-text\">文件描述符fd</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%AD%98-I-O\"><span class=\"toc-text\">缓存 I&#x2F;O</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E9%98%BB%E5%A1%9E-I-O-%E5%88%B0-I-O-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8\"><span class=\"toc-text\">从阻塞 I&#x2F;O 到 I&#x2F;O 多路复用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#I-O-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8Bselect%E3%80%81poll%E3%80%81epoll%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">I&#x2F;O 多路复用之select、poll、epoll详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#select\"><span class=\"toc-text\">select</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#poll\"><span class=\"toc-text\">poll</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#epoll\"><span class=\"toc-text\">epoll</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#epoll-create\"><span class=\"toc-text\">epoll_create</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#epoll-ctl\"><span class=\"toc-text\">epoll_ctl</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#epoll-wait\"><span class=\"toc-text\">epoll_wait</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#epoll%E7%9A%84%E4%BC%98%E7%82%B9-%E9%9D%A2%E8%AF%95%E5%8F%AF%E8%83%BD%E4%BC%9A%E9%97%AE\"><span class=\"toc-text\">epoll的优点(面试可能会问)</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E8%80%85%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">三者对比</span></a></li></ol>","author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"中间件高可用知识点","uid":"33521bd94ee66cdecae1afca83643ee9","slug":"中间件高可用知识点","date":"2021-05-03T20:47:18.000Z","updated":"2022-09-15T14:22:17.560Z","comments":true,"path":"api/articles/中间件高可用知识点.json","keywords":null,"cover":null,"text":"不同中间件的高可用架构RabbitMQ高可用 RabbitMQ 是比较有代表性的，因为是基于主从（非分布式）做高可用性的，我们就以 RabbitMQ 为例子讲解第一种 MQ 的高可用性怎么实现 RabbitMQ 有三种模式：单机模式、普通集群模式、镜像集群模式。 单机模式，就是 ...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"系统设计","slug":"系统设计","count":2,"path":"api/tags/系统设计.json"},{"name":"高可用","slug":"高可用","count":1,"path":"api/tags/高可用.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"操作系统之死锁","uid":"2ef40044afb1f095a6625b5d86ae265d","slug":"操作系统之死锁","date":"2021-05-03T20:43:12.000Z","updated":"2022-09-15T14:22:17.564Z","comments":true,"path":"api/articles/操作系统之死锁.json","keywords":null,"cover":[],"text":"死锁产生的条件 互斥：一个临界资源只能同时被一个进程所占有 不可抢占：一个进程获取的资源只能由这个线程主动释放，不能被抢占 占有且等待：一个进程占有某些资源，并尝试去获取被其他进程占有的其他的资源 循环等待：进程等待形成环形等待链，每个进程都占有着上一个进程想要获取的资源，并且等...","link":"","photos":[],"count_time":{"symbolsCount":682,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"计算机基础","slug":"计算机基础","count":4,"path":"api/tags/计算机基础.json"},{"name":"操作系统","slug":"操作系统","count":3,"path":"api/tags/操作系统.json"}],"author":{"name":"谢华客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"记录一些笔记和心情的地方","socials":{"github":"https://github.com/stephentse9527","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}